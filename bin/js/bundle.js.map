{
  "version": 3,
  "sources": ["../../node_modules/matter-js/build/matter.js", "../../assets/script/ball/ball2d.ts", "../../assets/script/ball/ball2dManager.ts", "../../assets/script/ball/ball3d.ts", "../../assets/script/ball/ball3dManager.ts", "../../assets/script/ball/ballManager.ts", "../../assets/script/billordWorldManager.ts", "../../assets/script/ballWorldConfig.ts", "../../assets/script/comm/billordCubeBarComm.ts", "../../assets/script/ballMain.ts", "../../src/Main.ts", "../../src/ss.ts"],
  "sourcesContent": ["/*!\n * matter-js 0.19.0 by @liabru\n * http://brm.io/matter-js/\n * License MIT\n * \n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Matter\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Matter\"] = factory();\n\telse\n\t\troot[\"Matter\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 20);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/\n\nvar Common = {};\n\nmodule.exports = Common;\n\n(function() {\n\n    Common._baseDelta = 1000 / 60;\n    Common._nextId = 0;\n    Common._seed = 0;\n    Common._nowStartTime = +(new Date());\n    Common._warnedOnce = {};\n    Common._decomp = null;\n    \n    /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */\n    Common.extend = function(obj, deep) {\n        var argsStart,\n            args,\n            deepClone;\n\n        if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n        } else {\n            argsStart = 1;\n            deepClone = true;\n        }\n\n        for (var i = argsStart; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            if (source) {\n                for (var prop in source) {\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\n                        if (!obj[prop] || obj[prop].constructor === Object) {\n                            obj[prop] = obj[prop] || {};\n                            Common.extend(obj[prop], deepClone, source[prop]);\n                        } else {\n                            obj[prop] = source[prop];\n                        }\n                    } else {\n                        obj[prop] = source[prop];\n                    }\n                }\n            }\n        }\n        \n        return obj;\n    };\n\n    /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */\n    Common.clone = function(obj, deep) {\n        return Common.extend({}, deep, obj);\n    };\n\n    /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */\n    Common.keys = function(obj) {\n        if (Object.keys)\n            return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj)\n            keys.push(key);\n        return keys;\n    };\n\n    /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */\n    Common.values = function(obj) {\n        var values = [];\n        \n        if (Object.keys) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n            }\n            return values;\n        }\n        \n        // avoid hasOwnProperty for performance\n        for (var key in obj)\n            values.push(obj[key]);\n        return values;\n    };\n\n    /**\n     * Gets a value from `base` relative to the `path` string.\n     * @method get\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} The object at the given path\n     */\n    Common.get = function(obj, path, begin, end) {\n        path = path.split('.').slice(begin, end);\n\n        for (var i = 0; i < path.length; i += 1) {\n            obj = obj[path[i]];\n        }\n\n        return obj;\n    };\n\n    /**\n     * Sets a value on `base` relative to the given `path` string.\n     * @method set\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {} val The value to set\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} Pass through `val` for chaining\n     */\n    Common.set = function(obj, path, val, begin, end) {\n        var parts = path.split('.').slice(begin, end);\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n        return val;\n    };\n\n    /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */\n    Common.shuffle = function(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    };\n\n    /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */\n    Common.choose = function(choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n    };\n\n    /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */\n    Common.isElement = function(obj) {\n        if (typeof HTMLElement !== 'undefined') {\n            return obj instanceof HTMLElement;\n        }\n\n        return !!(obj && obj.nodeType && obj.nodeName);\n    };\n\n    /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */\n    Common.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    /**\n     * Returns true if the object is a function.\n     * @method isFunction\n     * @param {object} obj\n     * @return {boolean} True if the object is a function, otherwise false\n     */\n    Common.isFunction = function(obj) {\n        return typeof obj === \"function\";\n    };\n\n    /**\n     * Returns true if the object is a plain object.\n     * @method isPlainObject\n     * @param {object} obj\n     * @return {boolean} True if the object is a plain object, otherwise false\n     */\n    Common.isPlainObject = function(obj) {\n        return typeof obj === 'object' && obj.constructor === Object;\n    };\n\n    /**\n     * Returns true if the object is a string.\n     * @method isString\n     * @param {object} obj\n     * @return {boolean} True if the object is a string, otherwise false\n     */\n    Common.isString = function(obj) {\n        return toString.call(obj) === '[object String]';\n    };\n    \n    /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */\n    Common.clamp = function(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    };\n    \n    /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */\n    Common.sign = function(value) {\n        return value < 0 ? -1 : 1;\n    };\n    \n    /**\n     * Returns the current timestamp since the time origin (e.g. from page load).\n     * The result is in milliseconds and will use high-resolution timing if available.\n     * @method now\n     * @return {number} the current timestamp in milliseconds\n     */\n    Common.now = function() {\n        if (typeof window !== 'undefined' && window.performance) {\n            if (window.performance.now) {\n                return window.performance.now();\n            } else if (window.performance.webkitNow) {\n                return window.performance.webkitNow();\n            }\n        }\n\n        if (Date.now) {\n            return Date.now();\n        }\n\n        return (new Date()) - Common._nowStartTime;\n    };\n    \n    /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */\n    Common.random = function(min, max) {\n        min = (typeof min !== \"undefined\") ? min : 0;\n        max = (typeof max !== \"undefined\") ? max : 1;\n        return min + _seededRandom() * (max - min);\n    };\n\n    var _seededRandom = function() {\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n    };\n\n    /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */\n    Common.colorToNumber = function(colorString) {\n        colorString = colorString.replace('#','');\n\n        if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0)\n                        + colorString.charAt(1) + colorString.charAt(1)\n                        + colorString.charAt(2) + colorString.charAt(2);\n        }\n\n        return parseInt(colorString, 16);\n    };\n\n    /**\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\n     * The default level is 'debug' which shows all console messages.  \n     *\n     * Possible level values are:\n     * - 0 = None\n     * - 1 = Debug\n     * - 2 = Info\n     * - 3 = Warn\n     * - 4 = Error\n     * @static\n     * @property logLevel\n     * @type {Number}\n     * @default 1\n     */\n    Common.logLevel = 1;\n\n    /**\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method log\n     * @param ...objs {} The objects to log.\n     */\n    Common.log = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method info\n     * @param ...objs {} The objects to log.\n     */\n    Common.info = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method warn\n     * @param ...objs {} The objects to log.\n     */\n    Common.warn = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Uses `Common.warn` to log the given message one time only.\n     * @method warnOnce\n     * @param ...objs {} The objects to log.\n     */\n    Common.warnOnce = function() {\n        var message = Array.prototype.slice.call(arguments).join(' ');\n\n        if (!Common._warnedOnce[message]) {\n            Common.warn(message);\n            Common._warnedOnce[message] = true;\n        }\n    };\n\n    /**\n     * Shows a deprecated console warning when the function on the given object is called.\n     * The target function will be replaced with a new function that first shows the warning\n     * and then calls the original function.\n     * @method deprecated\n     * @param {object} obj The object or module\n     * @param {string} name The property name of the function on obj\n     * @param {string} warning The one-time message to show if the function is called\n     */\n    Common.deprecated = function(obj, prop, warning) {\n        obj[prop] = Common.chain(function() {\n            Common.warnOnce('\uD83D\uDD05 deprecated \uD83D\uDD05', warning);\n        }, obj[prop]);\n    };\n\n    /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */\n    Common.nextId = function() {\n        return Common._nextId++;\n    };\n\n    /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     * @return {number} The position of needle in haystack, otherwise -1.\n     */\n    Common.indexOf = function(haystack, needle) {\n        if (haystack.indexOf)\n            return haystack.indexOf(needle);\n\n        for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle)\n                return i;\n        }\n\n        return -1;\n    };\n\n    /**\n     * A cross browser compatible array map implementation.\n     * @method map\n     * @param {array} list\n     * @param {function} func\n     * @return {array} Values from list transformed by func.\n     */\n    Common.map = function(list, func) {\n        if (list.map) {\n            return list.map(func);\n        }\n\n        var mapped = [];\n\n        for (var i = 0; i < list.length; i += 1) {\n            mapped.push(func(list[i]));\n        }\n\n        return mapped;\n    };\n\n    /**\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n     * Circular dependencies are allowed.\n     * @method topologicalSort\n     * @param {object} graph\n     * @return {array} Partially ordered set of vertices in topological order.\n     */\n    Common.topologicalSort = function(graph) {\n        // https://github.com/mgechev/javascript-algorithms\n        // Copyright (c) Minko Gechev (MIT license)\n        // Modifications: tidy formatting and naming\n        var result = [],\n            visited = [],\n            temp = [];\n\n        for (var node in graph) {\n            if (!visited[node] && !temp[node]) {\n                Common._topologicalSort(node, visited, temp, graph, result);\n            }\n        }\n\n        return result;\n    };\n\n    Common._topologicalSort = function(node, visited, temp, graph, result) {\n        var neighbors = graph[node] || [];\n        temp[node] = true;\n\n        for (var i = 0; i < neighbors.length; i += 1) {\n            var neighbor = neighbors[i];\n\n            if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n            }\n\n            if (!visited[neighbor]) {\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\n            }\n        }\n\n        temp[node] = false;\n        visited[node] = true;\n\n        result.push(node);\n    };\n\n    /**\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\n     * The arguments applied when calling the new function will also be applied to every function passed.\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\n     * After all passed functions have been called the new function returns the last returned value (if any).\n     * If any of the passed functions are a chain, then the chain will be flattened.\n     * @method chain\n     * @param ...funcs {function} The functions to chain.\n     * @return {function} A new function that calls the passed functions in order.\n     */\n    Common.chain = function() {\n        var funcs = [];\n\n        for (var i = 0; i < arguments.length; i += 1) {\n            var func = arguments[i];\n\n            if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n            } else {\n                funcs.push(func);\n            }\n        }\n\n        var chain = function() {\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n            var lastResult,\n                args = new Array(arguments.length);\n\n            for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n            }\n\n            for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n\n                if (typeof result !== 'undefined') {\n                    lastResult = result;\n                }\n            }\n\n            return lastResult;\n        };\n\n        chain._chained = funcs;\n\n        return chain;\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathBefore\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathBefore = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            func,\n            Common.get(base, path)\n        ));\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathAfter\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathAfter = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            Common.get(base, path),\n            func\n        ));\n    };\n\n    /**\n     * Provide the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module to enable\n     * concave vertex decomposition support when using `Bodies.fromVertices` e.g. `Common.setDecomp(require('poly-decomp'))`.\n     * @method setDecomp\n     * @param {} decomp The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module.\n     */\n    Common.setDecomp = function(decomp) {\n        Common._decomp = decomp;\n    };\n\n    /**\n     * Returns the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module provided through `Common.setDecomp`,\n     * otherwise returns the global `decomp` if set.\n     * @method getDecomp\n     * @return {} The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module if provided.\n     */\n    Common.getDecomp = function() {\n        // get user provided decomp if set\n        var decomp = Common._decomp;\n\n        try {\n            // otherwise from window global\n            if (!decomp && typeof window !== 'undefined') {\n                decomp = window.decomp;\n            }\n    \n            // otherwise from node global\n            if (!decomp && typeof global !== 'undefined') {\n                decomp = global.decomp;\n            }\n        } catch (e) {\n            // decomp not available\n            decomp = null;\n        }\n\n        return decomp;\n    };\n})();\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/\n\nvar Bounds = {};\n\nmodule.exports = Bounds;\n\n(function() {\n\n    /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */\n    Bounds.create = function(vertices) {\n        var bounds = { \n            min: { x: 0, y: 0 }, \n            max: { x: 0, y: 0 }\n        };\n\n        if (vertices)\n            Bounds.update(bounds, vertices);\n        \n        return bounds;\n    };\n\n    /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */\n    Bounds.update = function(bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n        \n        if (velocity) {\n            if (velocity.x > 0) {\n                bounds.max.x += velocity.x;\n            } else {\n                bounds.min.x += velocity.x;\n            }\n            \n            if (velocity.y > 0) {\n                bounds.max.y += velocity.y;\n            } else {\n                bounds.min.y += velocity.y;\n            }\n        }\n    };\n\n    /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */\n    Bounds.contains = function(bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x \n               && point.y >= bounds.min.y && point.y <= bounds.max.y;\n    };\n\n    /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */\n    Bounds.overlaps = function(boundsA, boundsB) {\n        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\n                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\n    };\n\n    /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */\n    Bounds.translate = function(bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n    };\n\n    /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */\n    Bounds.shift = function(bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n            deltaY = bounds.max.y - bounds.min.y;\n            \n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n    };\n    \n})();\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/\n\n// TODO: consider params for reusing vector objects\n\nvar Vector = {};\n\nmodule.exports = Vector;\n\n(function() {\n\n    /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */\n    Vector.create = function(x, y) {\n        return { x: x || 0, y: y || 0 };\n    };\n\n    /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */\n    Vector.clone = function(vector) {\n        return { x: vector.x, y: vector.y };\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */\n    Vector.magnitude = function(vector) {\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */\n    Vector.magnitudeSquared = function(vector) {\n        return (vector.x * vector.x) + (vector.y * vector.y);\n    };\n\n    /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} [output]\n     * @return {vector} The vector rotated about (0, 0)\n     */\n    Vector.rotate = function(vector, angle, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = vector.x * cos - vector.y * sin;\n        output.y = vector.x * sin + vector.y * cos;\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */\n    Vector.rotateAbout = function(vector, angle, point, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */\n    Vector.normalise = function(vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0)\n            return { x: 0, y: 0 };\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\n    };\n\n    /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */\n    Vector.dot = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\n    };\n\n    /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */\n    Vector.cross = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\n    };\n\n    /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n    };\n\n    /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */\n    Vector.add = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n    };\n\n    /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */\n    Vector.sub = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n    };\n\n    /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */\n    Vector.mult = function(vector, scalar) {\n        return { x: vector.x * scalar, y: vector.y * scalar };\n    };\n\n    /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */\n    Vector.div = function(vector, scalar) {\n        return { x: vector.x / scalar, y: vector.y / scalar };\n    };\n\n    /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */\n    Vector.perp = function(vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return { x: negate * -vector.y, y: negate * vector.x };\n    };\n\n    /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */\n    Vector.neg = function(vector) {\n        return { x: -vector.x, y: -vector.y };\n    };\n\n    /**\n     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */\n    Vector.angle = function(vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n    };\n\n    /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */\n    Vector._temp = [\n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create()\n    ];\n\n})();\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/\n\nvar Vertices = {};\n\nmodule.exports = Vertices;\n\nvar Vector = __webpack_require__(2);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Vertices must be specified in clockwise order.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */\n    Vertices.create = function(points, body) {\n        var vertices = [];\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n                    x: point.x,\n                    y: point.y,\n                    index: i,\n                    body: body,\n                    isInternal: false\n                };\n\n            vertices.push(vertex);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */\n    Vertices.fromPath = function(path, body) {\n        var pathPattern = /L?\\s*([-\\d.e]+)[\\s,]*([-\\d.e]+)*/ig,\n            points = [];\n\n        path.replace(pathPattern, function(match, x, y) {\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\n        });\n\n        return Vertices.create(points, body);\n    };\n\n    /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */\n    Vertices.centre = function(vertices) {\n        var area = Vertices.area(vertices, true),\n            centre = { x: 0, y: 0 },\n            cross,\n            temp,\n            j;\n\n        for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n        }\n\n        return Vector.div(centre, 6 * area);\n    };\n\n    /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */\n    Vertices.mean = function(vertices) {\n        var average = { x: 0, y: 0 };\n\n        for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n        }\n\n        return Vector.div(average, vertices.length);\n    };\n\n    /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */\n    Vertices.area = function(vertices, signed) {\n        var area = 0,\n            j = vertices.length - 1;\n\n        for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n        }\n\n        if (signed)\n            return area / 2;\n\n        return Math.abs(area) / 2;\n    };\n\n    /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */\n    Vertices.inertia = function(vertices, mass) {\n        var numerator = 0,\n            denominator = 0,\n            v = vertices,\n            cross,\n            j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // from equations at http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n        }\n\n        return (mass / 6) * (numerator / denominator);\n    };\n\n    /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */\n    Vertices.translate = function(vertices, vector, scalar) {\n        scalar = typeof scalar !== 'undefined' ? scalar : 1;\n\n        var verticesLength = vertices.length,\n            translateX = vector.x * scalar,\n            translateY = vector.y * scalar,\n            i;\n        \n        for (i = 0; i < verticesLength; i++) {\n            vertices[i].x += translateX;\n            vertices[i].y += translateY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */\n    Vertices.rotate = function(vertices, angle, point) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle),\n            pointX = point.x,\n            pointY = point.y,\n            verticesLength = vertices.length,\n            vertex,\n            dx,\n            dy,\n            i;\n\n        for (i = 0; i < verticesLength; i++) {\n            vertex = vertices[i];\n            dx = vertex.x - pointX;\n            dy = vertex.y - pointY;\n            vertex.x = pointX + (dx * cos - dy * sin);\n            vertex.y = pointY + (dx * sin + dy * cos);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */\n    Vertices.contains = function(vertices, point) {\n        var pointX = point.x,\n            pointY = point.y,\n            verticesLength = vertices.length,\n            vertex = vertices[verticesLength - 1],\n            nextVertex;\n\n        for (var i = 0; i < verticesLength; i++) {\n            nextVertex = vertices[i];\n\n            if ((pointX - vertex.x) * (nextVertex.y - vertex.y) \n                + (pointY - vertex.y) * (vertex.x - nextVertex.x) > 0) {\n                return false;\n            }\n\n            vertex = nextVertex;\n        }\n\n        return true;\n    };\n\n    /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */\n    Vertices.scale = function(vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1)\n            return vertices;\n\n        point = point || Vertices.centre(vertices);\n\n        var vertex,\n            delta;\n\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */\n    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n        if (typeof radius === 'number') {\n            radius = [radius];\n        } else {\n            radius = radius || [8];\n        }\n\n        // quality defaults to -1, which is auto\n        quality = (typeof quality !== 'undefined') ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n\n        var newVertices = [];\n\n        for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n                newVertices.push(vertex);\n                continue;\n            }\n\n            var prevNormal = Vector.normalise({ \n                x: vertex.y - prevVertex.y, \n                y: prevVertex.x - vertex.x\n            });\n\n            var nextNormal = Vector.normalise({ \n                x: nextVertex.y - vertex.y, \n                y: vertex.x - nextVertex.x\n            });\n\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n\n            var precision = quality;\n\n            if (quality === -1) {\n                // automatically decide precision\n                precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax);\n\n            // use an even value for precision, more likely to reduce axes by using symmetry\n            if (precision % 2 === 1)\n                precision += 1;\n\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n        }\n\n        return newVertices;\n    };\n\n    /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */\n    Vertices.clockwiseSort = function(vertices) {\n        var centre = Vertices.mean(vertices);\n\n        vertices.sort(function(vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n\n        return vertices;\n    };\n\n    /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */\n    Vertices.isConvex = function(vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n        // Copyright (c) Paul Bourke (use permitted)\n\n        var flag = 0,\n            n = vertices.length,\n            i,\n            j,\n            k,\n            z;\n\n        if (n < 3)\n            return null;\n\n        for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n                flag |= 1;\n            } else if (z > 0) {\n                flag |= 2;\n            }\n\n            if (flag === 3) {\n                return false;\n            }\n        }\n\n        if (flag !== 0){\n            return true;\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */\n    Vertices.hull = function(vertices) {\n        // http://geomalgorithms.com/a10-_hull-1.html\n\n        var upper = [],\n            lower = [], \n            vertex,\n            i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function(vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 \n                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n                lower.pop();\n            }\n\n            lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 \n                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n                upper.pop();\n            }\n\n            upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n\n        return upper.concat(lower);\n    };\n\n})();\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Body` module contains methods for creating and manipulating rigid bodies.\n* For creating bodies with common configurations such as rectangles, circles and other polygons see the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/\n\nvar Body = {};\n\nmodule.exports = Body;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\nvar Sleeping = __webpack_require__(7);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\nvar Axes = __webpack_require__(11);\n\n(function() {\n\n    Body._timeCorrection = true;\n    Body._inertiaScale = 4;\n    Body._nextCollidingGroupId = 1;\n    Body._nextNonCollidingGroupId = -1;\n    Body._nextCategory = 0x0001;\n    Body._baseDelta = 1000 / 60;\n\n    /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * Vertices must be specified in clockwise order.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */\n    Body.create = function(options) {\n        var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: { x: 0, y: 0 },\n            force: { x: 0, y: 0 },\n            torque: 0,\n            positionImpulse: { x: 0, y: 0 },\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: { x: 0, y: 0 },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n                visible: true,\n                opacity: 1,\n                strokeStyle: null,\n                fillStyle: null,\n                lineWidth: null,\n                sprite: {\n                    xScale: 1,\n                    yScale: 1,\n                    xOffset: 0,\n                    yOffset: 0\n                }\n            },\n            events: null,\n            bounds: null,\n            chamfer: null,\n            circleRadius: 0,\n            positionPrev: null,\n            anglePrev: 0,\n            parent: null,\n            axes: null,\n            area: 0,\n            mass: 0,\n            inertia: 0,\n            deltaTime: 1000 / 60,\n            _original: null\n        };\n\n        var body = Common.extend(defaults, options);\n\n        _initProperties(body, options);\n\n        return body;\n    };\n\n    /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */\n    Body.nextGroup = function(isNonColliding) {\n        if (isNonColliding)\n            return Body._nextNonCollidingGroupId--;\n\n        return Body._nextCollidingGroupId++;\n    };\n\n    /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */\n    Body.nextCategory = function() {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n    };\n\n    /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} [options]\n     */\n    var _initProperties = function(body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#14151f' : Common.choose(['#f19648', '#f5d259', '#f55a3c', '#063e7b', '#ececd1'])),\n            defaultStrokeStyle = body.isStatic ? '#555' : '#ccc',\n            defaultLineWidth = body.isStatic && body.render.fillStyle === null ? 1 : 0;\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.lineWidth = body.render.lineWidth || defaultLineWidth;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    };\n\n    /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */\n    Body.set = function(body, settings, value) {\n        var property;\n\n        if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n        }\n\n        for (property in settings) {\n            if (!Object.prototype.hasOwnProperty.call(settings, property))\n                continue;\n\n            value = settings[property];\n            switch (property) {\n\n            case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n            case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n            case 'mass':\n                Body.setMass(body, value);\n                break;\n            case 'density':\n                Body.setDensity(body, value);\n                break;\n            case 'inertia':\n                Body.setInertia(body, value);\n                break;\n            case 'vertices':\n                Body.setVertices(body, value);\n                break;\n            case 'position':\n                Body.setPosition(body, value);\n                break;\n            case 'angle':\n                Body.setAngle(body, value);\n                break;\n            case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n            case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n            case 'speed':\n                Body.setSpeed(body, value);\n                break;\n            case 'angularSpeed':\n                Body.setAngularSpeed(body, value);\n                break;\n            case 'parts':\n                Body.setParts(body, value);\n                break;\n            case 'centre':\n                Body.setCentre(body, value);\n                break;\n            default:\n                body[property] = value;\n\n            }\n        }\n    };\n\n    /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */\n    Body.setStatic = function(body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n                part._original = {\n                    restitution: part.restitution,\n                    friction: part.friction,\n                    mass: part.mass,\n                    inertia: part.inertia,\n                    density: part.density,\n                    inverseMass: part.inverseMass,\n                    inverseInertia: part.inverseInertia\n                };\n\n                part.restitution = 0;\n                part.friction = 1;\n                part.mass = part.inertia = part.density = Infinity;\n                part.inverseMass = part.inverseInertia = 0;\n\n                part.positionPrev.x = part.position.x;\n                part.positionPrev.y = part.position.y;\n                part.anglePrev = part.angle;\n                part.angularVelocity = 0;\n                part.speed = 0;\n                part.angularSpeed = 0;\n                part.motion = 0;\n            } else if (part._original) {\n                part.restitution = part._original.restitution;\n                part.friction = part._original.friction;\n                part.mass = part._original.mass;\n                part.inertia = part._original.inertia;\n                part.density = part._original.density;\n                part.inverseMass = part._original.inverseMass;\n                part.inverseInertia = part._original.inverseInertia;\n\n                part._original = null;\n            }\n        }\n    };\n\n    /**\n     * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */\n    Body.setMass = function(body, mass) {\n        var moment = body.inertia / (body.mass / 6);\n        body.inertia = moment * (mass / 6);\n        body.inverseInertia = 1 / body.inertia;\n\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n    };\n\n    /**\n     * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */\n    Body.setDensity = function(body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n    };\n\n    /**\n     * Sets the moment of inertia of the body. This is the second moment of area in two dimensions.\n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */\n    Body.setInertia = function(body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n    };\n\n    /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull. Concave vertices must be decomposed into convex parts.\n     * \n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */\n    Body.setVertices = function(body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n            body.vertices = vertices;\n        } else {\n            body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n    };\n\n    /**\n     * Sets the parts of the `body` and updates mass, inertia and centroid.\n     * Each part will have its parent set to `body`.\n     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param {body[]} parts\n     * @param {bool} [autoHull=true]\n     */\n    Body.setParts = function(body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n\n        for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            if (part !== body) {\n                part.parent = body;\n                body.parts.push(part);\n            }\n        }\n\n        if (body.parts.length === 1)\n            return;\n\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n            var vertices = [];\n            for (i = 0; i < parts.length; i++) {\n                vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = Body._totalProperties(body);\n\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n    };\n\n    /**\n     * Set the centre of mass of the body. \n     * The `centre` is a vector in world-space unless `relative` is set, in which case it is a translation.\n     * The centre of mass is the point the body rotates about and can be used to simulate non-uniform density.\n     * This is equal to moving `body.position` but not the `body.vertices`.\n     * Invalid if the `centre` falls outside the body's convex hull.\n     * @method setCentre\n     * @param {body} body\n     * @param {vector} centre\n     * @param {bool} relative\n     */\n    Body.setCentre = function(body, centre, relative) {\n        if (!relative) {\n            body.positionPrev.x = centre.x - (body.position.x - body.positionPrev.x);\n            body.positionPrev.y = centre.y - (body.position.y - body.positionPrev.y);\n            body.position.x = centre.x;\n            body.position.y = centre.y;\n        } else {\n            body.positionPrev.x += centre.x;\n            body.positionPrev.y += centre.y;\n            body.position.x += centre.x;\n            body.position.y += centre.y;\n        }\n    };\n\n    /**\n     * Sets the position of the body. By default velocity is unchanged.\n     * If `updateVelocity` is `true` then velocity is inferred from the change in position.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     * @param {boolean} [updateVelocity=false]\n     */\n    Body.setPosition = function(body, position, updateVelocity) {\n        var delta = Vector.sub(position, body.position);\n\n        if (updateVelocity) {\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n            body.velocity.x = delta.x;\n            body.velocity.y = delta.y;\n            body.speed = Vector.magnitude(delta);\n        } else {\n            body.positionPrev.x += delta.x;\n            body.positionPrev.y += delta.y;\n        }\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Sets the angle of the body. By default angular velocity is unchanged.\n     * If `updateVelocity` is `true` then angular velocity is inferred from the change in angle.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     * @param {boolean} [updateVelocity=false]\n     */\n    Body.setAngle = function(body, angle, updateVelocity) {\n        var delta = angle - body.angle;\n        \n        if (updateVelocity) {\n            body.anglePrev = body.angle;\n            body.angularVelocity = delta;\n            body.angularSpeed = Math.abs(delta);\n        } else {\n            body.anglePrev += delta;\n        }\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n            if (i > 0) {\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n        }\n    };\n\n    /**\n     * Sets the current linear velocity of the body.  \n     * Affects body speed.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */\n    Body.setVelocity = function(body, velocity) {\n        var timeScale = body.deltaTime / Body._baseDelta;\n        body.positionPrev.x = body.position.x - velocity.x * timeScale;\n        body.positionPrev.y = body.position.y - velocity.y * timeScale;\n        body.velocity.x = (body.position.x - body.positionPrev.x) / timeScale;\n        body.velocity.y = (body.position.y - body.positionPrev.y) / timeScale;\n        body.speed = Vector.magnitude(body.velocity);\n    };\n\n    /**\n     * Gets the current linear velocity of the body.\n     * @method getVelocity\n     * @param {body} body\n     * @return {vector} velocity\n     */\n    Body.getVelocity = function(body) {\n        var timeScale = Body._baseDelta / body.deltaTime;\n\n        return {\n            x: (body.position.x - body.positionPrev.x) * timeScale,\n            y: (body.position.y - body.positionPrev.y) * timeScale\n        };\n    };\n\n    /**\n     * Gets the current linear speed of the body.  \n     * Equivalent to the magnitude of its velocity.\n     * @method getSpeed\n     * @param {body} body\n     * @return {number} speed\n     */\n    Body.getSpeed = function(body) {\n        return Vector.magnitude(Body.getVelocity(body));\n    };\n\n    /**\n     * Sets the current linear speed of the body.  \n     * Direction is maintained. Affects body velocity.\n     * @method setSpeed\n     * @param {body} body\n     * @param {number} speed\n     */\n    Body.setSpeed = function(body, speed) {\n        Body.setVelocity(body, Vector.mult(Vector.normalise(Body.getVelocity(body)), speed));\n    };\n\n    /**\n     * Sets the current rotational velocity of the body.  \n     * Affects body angular speed.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */\n    Body.setAngularVelocity = function(body, velocity) {\n        var timeScale = body.deltaTime / Body._baseDelta;\n        body.anglePrev = body.angle - velocity * timeScale;\n        body.angularVelocity = (body.angle - body.anglePrev) / timeScale;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Gets the current rotational velocity of the body.\n     * @method getAngularVelocity\n     * @param {body} body\n     * @return {number} angular velocity\n     */\n    Body.getAngularVelocity = function(body) {\n        return (body.angle - body.anglePrev) * Body._baseDelta / body.deltaTime;\n    };\n\n    /**\n     * Gets the current rotational speed of the body.  \n     * Equivalent to the magnitude of its angular velocity.\n     * @method getAngularSpeed\n     * @param {body} body\n     * @return {number} angular speed\n     */\n    Body.getAngularSpeed = function(body) {\n        return Math.abs(Body.getAngularVelocity(body));\n    };\n\n    /**\n     * Sets the current rotational speed of the body.  \n     * Direction is maintained. Affects body angular velocity.\n     * @method setAngularSpeed\n     * @param {body} body\n     * @param {number} speed\n     */\n    Body.setAngularSpeed = function(body, speed) {\n        Body.setAngularVelocity(body, Common.sign(Body.getAngularVelocity(body)) * speed);\n    };\n\n    /**\n     * Moves a body by a given vector relative to its current position. By default velocity is unchanged.\n     * If `updateVelocity` is `true` then velocity is inferred from the change in position.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     * @param {boolean} [updateVelocity=false]\n     */\n    Body.translate = function(body, translation, updateVelocity) {\n        Body.setPosition(body, Vector.add(body.position, translation), updateVelocity);\n    };\n\n    /**\n     * Rotates a body by a given angle relative to its current angle. By default angular velocity is unchanged.\n     * If `updateVelocity` is `true` then angular velocity is inferred from the change in angle.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     * @param {vector} [point]\n     * @param {boolean} [updateVelocity=false]\n     */\n    Body.rotate = function(body, rotation, point, updateVelocity) {\n        if (!point) {\n            Body.setAngle(body, body.angle + rotation, updateVelocity);\n        } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            }, updateVelocity);\n\n            Body.setAngle(body, body.angle + rotation, updateVelocity);\n        }\n    };\n\n    /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */\n    Body.scale = function(body, scaleX, scaleY, point) {\n        var totalArea = 0,\n            totalInertia = 0;\n\n        point = point || body.position;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            // scale vertices\n            Vertices.scale(part.vertices, scaleX, scaleY, point);\n\n            // update properties\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area);\n\n            // update inertia (requires vertices to be at origin)\n            Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\n\n            if (i > 0) {\n                totalArea += part.area;\n                totalInertia += part.inertia;\n            }\n\n            // scale position\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY;\n\n            // update bounds\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle parent body\n        if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n                Body.setMass(body, body.density * totalArea);\n                Body.setInertia(body, totalInertia);\n            }\n        }\n\n        // handle circles\n        if (body.circleRadius) { \n            if (scaleX === scaleY) {\n                body.circleRadius *= scaleX;\n            } else {\n                // body is no longer a circle\n                body.circleRadius = null;\n            }\n        }\n    };\n\n    /**\n     * Performs an update by integrating the equations of motion on the `body`.\n     * This is applied every update by `Matter.Engine` automatically.\n     * @method update\n     * @param {body} body\n     * @param {number} [deltaTime=16.666]\n     */\n    Body.update = function(body, deltaTime) {\n        deltaTime = (typeof deltaTime !== 'undefined' ? deltaTime : (1000 / 60)) * body.timeScale;\n\n        var deltaTimeSquared = deltaTime * deltaTime,\n            correction = Body._timeCorrection ? deltaTime / (body.deltaTime || deltaTime) : 1;\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * (deltaTime / Common._baseDelta),\n            velocityPrevX = (body.position.x - body.positionPrev.x) * correction,\n            velocityPrevY = (body.position.y - body.positionPrev.y) * correction;\n\n        // update velocity with Verlet integration\n        body.velocity.x = (velocityPrevX * frictionAir) + (body.force.x / body.mass) * deltaTimeSquared;\n        body.velocity.y = (velocityPrevY * frictionAir) + (body.force.y / body.mass) * deltaTimeSquared;\n\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n        body.deltaTime = deltaTime;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            Vertices.translate(part.vertices, body.velocity);\n            \n            if (i > 0) {\n                part.position.x += body.velocity.x;\n                part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                Axes.rotate(part.axes, body.angularVelocity);\n                if (i > 0) {\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Updates properties `body.velocity`, `body.speed`, `body.angularVelocity` and `body.angularSpeed` which are normalised in relation to `Body._baseDelta`.\n     * @method updateVelocities\n     * @param {body} body\n     */\n    Body.updateVelocities = function(body) {\n        var timeScale = Body._baseDelta / body.deltaTime,\n            bodyVelocity = body.velocity;\n\n        bodyVelocity.x = (body.position.x - body.positionPrev.x) * timeScale;\n        bodyVelocity.y = (body.position.y - body.positionPrev.y) * timeScale;\n        body.speed = Math.sqrt((bodyVelocity.x * bodyVelocity.x) + (bodyVelocity.y * bodyVelocity.y));\n\n        body.angularVelocity = (body.angle - body.anglePrev) * timeScale;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Applies the `force` to the `body` from the force origin `position` in world-space, over a single timestep, including applying any resulting angular torque.\n     * \n     * Forces are useful for effects like gravity, wind or rocket thrust, but can be difficult in practice when precise control is needed. In these cases see `Body.setVelocity` and `Body.setPosition` as an alternative.\n     * \n     * The force from this function is only applied once for the duration of a single timestep, in other words the duration depends directly on the current engine update `delta` and the rate of calls to this function.\n     * \n     * Therefore to account for time, you should apply the force constantly over as many engine updates as equivalent to the intended duration.\n     * \n     * If all or part of the force duration is some fraction of a timestep, first multiply the force by `duration / timestep`.\n     * \n     * The force origin `position` in world-space must also be specified. Passing `body.position` will result in zero angular effect as the force origin would be at the centre of mass.\n     * \n     * The `body` will take time to accelerate under a force, the resulting effect depends on duration of the force, the body mass and other forces on the body including friction combined.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position The force origin in world-space. Pass `body.position` to avoid angular torque.\n     * @param {vector} force\n     */\n    Body.applyForce = function(body, position, force) {\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\n        body.force.x += force.x;\n        body.force.y += force.y;\n        body.torque += offset.x * force.y - offset.y * force.x;\n    };\n\n    /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */\n    Body._totalProperties = function(body) {\n        // from equations at:\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: { x: 0, y: 0 }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n        }\n\n        properties.centre = Vector.div(properties.centre, properties.mass);\n\n        return properties;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * _Read only_. Set by `Body.create`.\n     * \n     * A `String` denoting the type of object.\n     *\n     * @readOnly\n     * @property type\n     * @type string\n     * @default \"body\"\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */\n\n    /**\n     * _Read only_. Use `Body.setParts` to set. \n     * \n     * An array of bodies that make up this body. \n     * The first body in the array must always be a self reference to the current body instance.\n     * All bodies in the `parts` array together form a single rigid compound body.\n     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n     * Parts themselves should never be added to a `World`, only the parent body should be.\n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n     *\n     * @readOnly\n     * @property parts\n     * @type body[]\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * _Read only_. Updated by `Body.setParts`.\n     * \n     * A reference to the body that this is a part of. See `body.parts`.\n     * This is a self reference if the body is not a part of another body.\n     *\n     * @readOnly\n     * @property parent\n     * @type body\n     */\n\n    /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * _Read only_. Use `Body.setVertices` or `Body.setParts` to set. See also `Bodies.fromVertices`.\n     * \n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     * `[{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]`\n     * \n     * Vertices must always be convex, in clockwise order and must not contain any duplicate points.\n     * \n     * Concave vertices should be decomposed into convex `parts`, see `Bodies.fromVertices` and `Body.setParts`.\n     *\n     * When set the vertices are translated such that `body.position` is at the centre of mass.\n     * Many other body properties are automatically calculated from these vertices when set including `density`, `area` and `inertia`.\n     * \n     * The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @readOnly\n     * @property vertices\n     * @type vector[]\n     */\n\n    /**\n     * _Read only_. Use `Body.setPosition` to set. \n     * \n     * A `Vector` that specifies the current world-space position of the body.\n     * \n     * @readOnly\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that accumulates the total force applied to the body for a single update.\n     * Force is zeroed after every `Engine.update`, so constant forces should be applied for every update they are needed. See also `Body.applyForce`.\n     * \n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that accumulates the total torque (turning force) applied to the body for a single update. See also `Body.applyForce`.\n     * Torque is zeroed after every `Engine.update`, so constant torques should be applied for every update they are needed.\n     *\n     * Torques result in angular acceleration on every update, which depends on body inertia and the engine update delta.\n     * \n     * @property torque\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * _Read only_. Use `Body.setSpeed` to set. \n     * \n     * See `Body.getSpeed` for details.\n     * \n     * Equivalent to the magnitude of `body.velocity` (always positive).\n     * \n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * _Read only_. Use `Body.setVelocity` to set. \n     * \n     * See `Body.getVelocity` for details.\n     * \n     * Equivalent to the magnitude of `body.angularVelocity` (always positive).\n     * \n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * _Read only_. Use `Body.setAngularSpeed` to set. \n     * \n     * See `Body.getAngularSpeed` for details.\n     * \n     * \n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * _Read only_. Use `Body.setAngularVelocity` to set. \n     * \n     * See `Body.getAngularVelocity` for details.\n     * \n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * _Read only_. Use `Body.setStatic` to set. \n     * \n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     *\n     * @readOnly\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * _Read only_. Use `Sleeping.set` to set. \n     * \n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     *\n     * @readOnly\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * _Read only_. Calculated during engine update only when sleeping is enabled.\n     * \n     * A `Number` that loosely measures the amount of movement a body currently has.\n     *\n     * Derived from `body.speed^2 + body.angularSpeed^2`. See `Sleeping.update`.\n     * \n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the length of time during which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     * \n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */\n\n    /**\n     * _Read only_. Use `Body.setDensity` to set. \n     * \n     * A `Number` that defines the density of the body (mass per unit area).\n     * \n     * Mass will also be updated when set.\n     *\n     * @readOnly\n     * @property density\n     * @type number\n     * @default 0.001\n     */\n\n    /**\n     * _Read only_. Use `Body.setMass` to set. \n     * \n     * A `Number` that defines the mass of the body.\n     * \n     * Density will also be updated when set.\n     * \n     * @readOnly\n     * @property mass\n     * @type number\n     */\n\n    /**\n     * _Read only_. Use `Body.setMass` to set. \n     * \n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     *\n     * @readOnly\n     * @property inverseMass\n     * @type number\n     */\n\n    /**\n     * _Read only_. Automatically calculated when vertices, mass or density are set or set through `Body.setInertia`.\n     * \n     * A `Number` that defines the moment of inertia of the body. This is the second moment of area in two dimensions.\n     * \n     * Can be manually set to `Infinity` to prevent rotation of the body. See `Body.setInertia`.\n     * \n     * @readOnly\n     * @property inertia\n     * @type number\n     */\n\n    /**\n     * _Read only_. Automatically calculated when vertices, mass or density are set or calculated by `Body.setInertia`.\n     * \n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * \n     * @readOnly\n     * @property inverseInertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     * `Math.max(bodyA.restitution, bodyB.restitution)`\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear. \n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     * `Math.min(bodyA.friction, bodyB.friction)`\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */\n\n    /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */\n\n    /**\n     * A `Number` that defines the air friction of the body (air resistance). \n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear. \n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */\n\n    /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n    /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */\n\n    /**\n     * A `Number` that specifies a thin boundary around the body where it is allowed to slightly sink into other bodies.\n     * \n     * This is required for proper collision response, including friction and restitution effects.\n     * \n     * The default should generally suffice in most cases. You may need to decrease this value for very small bodies that are nearing the default value in scale.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */\n\n    /**\n     * A `Number` that specifies per-body time scaling.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * _Read only_. Updated during engine update.\n     * \n     * A `Number` that records the last delta time value used to update this body.\n     * Used to calculate speed and velocity.\n     *\n     * @readOnly\n     * @property deltaTime\n     * @type number\n     * @default 1000 / 60\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */\n\n    /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */\n\n    /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */\n     \n    /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * _Read only_. Calculated automatically when vertices are set.\n     * \n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated when vertices are set.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @readOnly\n     * @property axes\n     * @type vector[]\n     */\n     \n    /**\n     * _Read only_. Calculated automatically when vertices are set.\n     * \n     * A `Number` that measures the area of the body's convex hull.\n     * \n     * @readOnly\n     * @property area\n     * @type string\n     * @default \n     */\n\n    /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated when vertices are set and constantly updated by `Body.update` during simulation.\n     * \n     * @property bounds\n     * @type bounds\n     */\n\n})();\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/\n\nvar Events = {};\n\nmodule.exports = Events;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.on = function(object, eventNames, callback) {\n        var names = eventNames.split(' '),\n            name;\n\n        for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n        }\n\n        return callback;\n    };\n\n    /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.off = function(object, eventNames, callback) {\n        if (!eventNames) {\n            object.events = {};\n            return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n        }\n\n        var names = eventNames.split(' ');\n\n        for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n                for (var j = 0; j < callbacks.length; j++) {\n                    if (callbacks[j] !== callback)\n                        newCallbacks.push(callbacks[j]);\n                }\n            }\n\n            object.events[names[i]] = newCallbacks;\n        }\n    };\n\n    /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */\n    Events.trigger = function(object, eventNames, event) {\n        var names,\n            name,\n            callbacks,\n            eventClone;\n\n        var events = object.events;\n        \n        if (events && Common.keys(events).length > 0) {\n            if (!event)\n                event = {};\n\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n                name = names[i];\n                callbacks = events[name];\n\n                if (callbacks) {\n                    eventClone = Common.clone(event, false);\n                    eventClone.name = name;\n                    eventClone.source = object;\n\n                    for (var j = 0; j < callbacks.length; j++) {\n                        callbacks[j].apply(object, [eventClone]);\n                    }\n                }\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* A composite is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite` objects.\n*\n* They are a container that can represent complex objects made of multiple parts, even if they are not physically connected.\n* A composite could contain anything from a single body all the way up to a whole world.\n* \n* When making any changes to composites, use the included functions rather than changing their properties directly.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/\n\nvar Composite = {};\n\nmodule.exports = Composite;\n\nvar Events = __webpack_require__(5);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\nvar Body = __webpack_require__(4);\n\n(function() {\n\n    /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */\n    Composite.create = function(options) {\n        return Common.extend({ \n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [], \n            constraints: [], \n            composites: [],\n            label: 'Composite',\n            plugin: {},\n            cache: {\n                allBodies: null,\n                allConstraints: null,\n                allComposites: null\n            }\n        }, options);\n    };\n\n    /**\n     * Sets the composite's `isModified` flag. \n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @private\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n\n        if (isModified && composite.cache) {\n            composite.cache.allBodies = null;\n            composite.cache.allConstraints = null;\n            composite.cache.allComposites = null;\n        }\n\n        if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n\n        if (updateChildren) {\n            for (var i = 0; i < composite.composites.length; i++) {\n                var childComposite = composite.composites[i];\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n        }\n    };\n\n    /**\n     * Generic single or multi-add function. Adds a single or an array of body(s), constraint(s) or composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {object|array} object A single or an array of body(s), constraint(s) or composite(s)\n     * @return {composite} The original composite with the objects added\n     */\n    Composite.add = function(composite, object) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeAdd', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                    Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                    break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n            case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n            case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n            case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterAdd', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {object|array} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */\n    Composite.remove = function(composite, object, deep) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeRemove', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n            case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n            case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n            case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterRemove', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */\n    Composite.addComposite = function(compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n        if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++){\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n        }\n\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */\n    Composite.removeCompositeAt = function(composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */\n    Composite.addBody = function(composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBody = function(composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n        if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeBody(composite.composites[i], body, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBodyAt = function(composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */\n    Composite.addConstraint = function(composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraint = function(composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraintAt = function(composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */\n    Composite.clear = function(composite, keepStatic, deep) {\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.clear(composite.composites[i], keepStatic, true);\n            }\n        }\n        \n        if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\n        } else {\n            composite.bodies.length = 0;\n        }\n\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */\n    Composite.allBodies = function(composite) {\n        if (composite.cache && composite.cache.allBodies) {\n            return composite.cache.allBodies;\n        }\n\n        var bodies = [].concat(composite.bodies);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n        if (composite.cache) {\n            composite.cache.allBodies = bodies;\n        }\n\n        return bodies;\n    };\n\n    /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */\n    Composite.allConstraints = function(composite) {\n        if (composite.cache && composite.cache.allConstraints) {\n            return composite.cache.allConstraints;\n        }\n\n        var constraints = [].concat(composite.constraints);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n        if (composite.cache) {\n            composite.cache.allConstraints = constraints;\n        }\n\n        return constraints;\n    };\n\n    /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */\n    Composite.allComposites = function(composite) {\n        if (composite.cache && composite.cache.allComposites) {\n            return composite.cache.allComposites;\n        }\n\n        var composites = [].concat(composite.composites);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n        if (composite.cache) {\n            composite.cache.allComposites = composites;\n        }\n\n        return composites;\n    };\n\n    /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */\n    Composite.get = function(composite, id, type) {\n        var objects,\n            object;\n\n        switch (type) {\n        case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n        case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n        case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n\n        if (!objects)\n            return null;\n\n        object = objects.filter(function(object) { \n            return object.id.toString() === id.toString(); \n        });\n\n        return object.length === 0 ? null : object[0];\n    };\n\n    /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */\n    Composite.move = function(compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n    };\n\n    /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */\n    Composite.rebase = function(composite) {\n        var objects = Composite.allBodies(composite)\n            .concat(Composite.allConstraints(composite))\n            .concat(Composite.allComposites(composite));\n\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n        }\n\n        return composite;\n    };\n\n    /**\n     * Translates all children in the composite by a given vector relative to their current positions, \n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */\n    Composite.translate = function(composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n        }\n\n        return composite;\n    };\n\n    /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.rotate = function(composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.rotate(body, rotation);\n        }\n\n        return composite;\n    };\n\n    /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + dx * scaleX,\n                y: point.y + dy * scaleY\n            });\n\n            Body.scale(body, scaleX, scaleY);\n        }\n\n        return composite;\n    };\n\n    /**\n     * Returns the union of the bounds of all of the composite's bodies.\n     * @method bounds\n     * @param {composite} composite The composite.\n     * @returns {bounds} The composite bounds.\n     */\n    Composite.bounds = function(composite) {\n        var bodies = Composite.allBodies(composite),\n            vertices = [];\n\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n        }\n\n        return Bounds.create(vertices);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */\n\n    /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * This is automatically managed when bodies, constraints or composites are added or removed.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */\n\n    /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */\n\n    /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * An object used for storing cached results for performance reasons.\n     * This is used internally only and is automatically managed.\n     *\n     * @private\n     * @property cache\n     * @type {}\n     */\n\n})();\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/\n\nvar Sleeping = {};\n\nmodule.exports = Sleeping;\n\nvar Body = __webpack_require__(4);\nvar Events = __webpack_require__(5);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Sleeping._motionWakeThreshold = 0.18;\n    Sleeping._motionSleepThreshold = 0.08;\n    Sleeping._minBias = 0.9;\n\n    /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} delta\n     */\n    Sleeping.update = function(bodies, delta) {\n        var timeScale = delta / Common._baseDelta,\n            motionSleepThreshold = Sleeping._motionSleepThreshold;\n        \n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                speed = Body.getSpeed(body),\n                angularSpeed = Body.getAngularSpeed(body),\n                motion = speed * speed + angularSpeed * angularSpeed;\n\n            // wake up bodies if they have a force applied\n            if (body.force.x !== 0 || body.force.y !== 0) {\n                Sleeping.set(body, false);\n                continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion);\n        \n            // biased average motion estimation between frames\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n\n            if (body.sleepThreshold > 0 && body.motion < motionSleepThreshold) {\n                body.sleepCounter += 1;\n                \n                if (body.sleepCounter >= body.sleepThreshold / timeScale) {\n                    Sleeping.set(body, true);\n                }\n            } else if (body.sleepCounter > 0) {\n                body.sleepCounter -= 1;\n            }\n        }\n    };\n\n    /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     */\n    Sleeping.afterCollisions = function(pairs) {\n        var motionSleepThreshold = Sleeping._motionSleepThreshold;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            // don't wake inactive pairs\n            if (!pair.isActive)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent, \n                bodyB = collision.bodyB.parent;\n        \n            // don't wake if at least one body is static\n            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\n                continue;\n        \n            if (bodyA.isSleeping || bodyB.isSleeping) {\n                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\n                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n                if (!sleepingBody.isStatic && movingBody.motion > motionSleepThreshold) {\n                    Sleeping.set(sleepingBody, false);\n                }\n            }\n        }\n    };\n  \n    /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */\n    Sleeping.set = function(body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n\n        if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n                Events.trigger(body, 'sleepStart');\n            }\n        } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n                Events.trigger(body, 'sleepEnd');\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Collision` module contains methods for detecting collisions between a given pair of bodies.\n*\n* For efficient detection between a list of bodies, see `Matter.Detector` and `Matter.Query`.\n*\n* See `Matter.Engine` for collision events.\n*\n* @class Collision\n*/\n\nvar Collision = {};\n\nmodule.exports = Collision;\n\nvar Vertices = __webpack_require__(3);\nvar Pair = __webpack_require__(9);\n\n(function() {\n    var _supports = [];\n\n    var _overlapAB = {\n        overlap: 0,\n        axis: null\n    };\n\n    var _overlapBA = {\n        overlap: 0,\n        axis: null\n    };\n\n    /**\n     * Creates a new collision record.\n     * @method create\n     * @param {body} bodyA The first body part represented by the collision record\n     * @param {body} bodyB The second body part represented by the collision record\n     * @return {collision} A new collision record\n     */\n    Collision.create = function(bodyA, bodyB) {\n        return { \n            pair: null,\n            collided: false,\n            bodyA: bodyA,\n            bodyB: bodyB,\n            parentA: bodyA.parent,\n            parentB: bodyB.parent,\n            depth: 0,\n            normal: { x: 0, y: 0 },\n            tangent: { x: 0, y: 0 },\n            penetration: { x: 0, y: 0 },\n            supports: []\n        };\n    };\n\n    /**\n     * Detect collision between two bodies.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {pairs} [pairs] Optionally reuse collision records from existing pairs.\n     * @return {collision|null} A collision record if detected, otherwise null\n     */\n    Collision.collides = function(bodyA, bodyB, pairs) {\n        Collision._overlapAxes(_overlapAB, bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n        if (_overlapAB.overlap <= 0) {\n            return null;\n        }\n\n        Collision._overlapAxes(_overlapBA, bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n        if (_overlapBA.overlap <= 0) {\n            return null;\n        }\n\n        // reuse collision records for gc efficiency\n        var pair = pairs && pairs.table[Pair.id(bodyA, bodyB)],\n            collision;\n\n        if (!pair) {\n            collision = Collision.create(bodyA, bodyB);\n            collision.collided = true;\n            collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n            collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n            collision.parentA = collision.bodyA.parent;\n            collision.parentB = collision.bodyB.parent;\n        } else {\n            collision = pair.collision;\n        }\n\n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n\n        var minOverlap;\n\n        if (_overlapAB.overlap < _overlapBA.overlap) {\n            minOverlap = _overlapAB;\n        } else {\n            minOverlap = _overlapBA;\n        }\n\n        var normal = collision.normal,\n            supports = collision.supports,\n            minAxis = minOverlap.axis,\n            minAxisX = minAxis.x,\n            minAxisY = minAxis.y;\n\n        // ensure normal is facing away from bodyA\n        if (minAxisX * (bodyB.position.x - bodyA.position.x) + minAxisY * (bodyB.position.y - bodyA.position.y) < 0) {\n            normal.x = minAxisX;\n            normal.y = minAxisY;\n        } else {\n            normal.x = -minAxisX;\n            normal.y = -minAxisY;\n        }\n        \n        collision.tangent.x = -normal.y;\n        collision.tangent.y = normal.x;\n\n        collision.depth = minOverlap.overlap;\n\n        collision.penetration.x = normal.x * collision.depth;\n        collision.penetration.y = normal.y * collision.depth;\n\n        // find support points, there is always either exactly one or two\n        var supportsB = Collision._findSupports(bodyA, bodyB, normal, 1),\n            supportCount = 0;\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, supportsB[0])) {\n            supports[supportCount++] = supportsB[0];\n        }\n\n        if (Vertices.contains(bodyA.vertices, supportsB[1])) {\n            supports[supportCount++] = supportsB[1];\n        }\n\n        // find the supports from bodyA that are inside bodyB\n        if (supportCount < 2) {\n            var supportsA = Collision._findSupports(bodyB, bodyA, normal, -1);\n\n            if (Vertices.contains(bodyB.vertices, supportsA[0])) {\n                supports[supportCount++] = supportsA[0];\n            }\n\n            if (supportCount < 2 && Vertices.contains(bodyB.vertices, supportsA[1])) {\n                supports[supportCount++] = supportsA[1];\n            }\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supportCount === 0) {\n            supports[supportCount++] = supportsB[0];\n        }\n\n        // update supports array size\n        supports.length = supportCount;\n\n        return collision;\n    };\n\n    /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {object} result\n     * @param {vertices} verticesA\n     * @param {vertices} verticesB\n     * @param {axes} axes\n     */\n    Collision._overlapAxes = function(result, verticesA, verticesB, axes) {\n        var verticesALength = verticesA.length,\n            verticesBLength = verticesB.length,\n            verticesAX = verticesA[0].x,\n            verticesAY = verticesA[0].y,\n            verticesBX = verticesB[0].x,\n            verticesBY = verticesB[0].y,\n            axesLength = axes.length,\n            overlapMin = Number.MAX_VALUE,\n            overlapAxisNumber = 0,\n            overlap,\n            overlapAB,\n            overlapBA,\n            dot,\n            i,\n            j;\n\n        for (i = 0; i < axesLength; i++) {\n            var axis = axes[i],\n                axisX = axis.x,\n                axisY = axis.y,\n                minA = verticesAX * axisX + verticesAY * axisY,\n                minB = verticesBX * axisX + verticesBY * axisY,\n                maxA = minA,\n                maxB = minB;\n            \n            for (j = 1; j < verticesALength; j += 1) {\n                dot = verticesA[j].x * axisX + verticesA[j].y * axisY;\n\n                if (dot > maxA) { \n                    maxA = dot;\n                } else if (dot < minA) { \n                    minA = dot;\n                }\n            }\n\n            for (j = 1; j < verticesBLength; j += 1) {\n                dot = verticesB[j].x * axisX + verticesB[j].y * axisY;\n\n                if (dot > maxB) { \n                    maxB = dot;\n                } else if (dot < minB) { \n                    minB = dot;\n                }\n            }\n\n            overlapAB = maxA - minB;\n            overlapBA = maxB - minA;\n            overlap = overlapAB < overlapBA ? overlapAB : overlapBA;\n\n            if (overlap < overlapMin) {\n                overlapMin = overlap;\n                overlapAxisNumber = i;\n\n                if (overlap <= 0) {\n                    // can not be intersecting\n                    break;\n                }\n            } \n        }\n\n        result.axis = axes[overlapAxisNumber];\n        result.overlap = overlapMin;\n    };\n\n    /**\n     * Projects vertices on an axis and returns an interval.\n     * @method _projectToAxis\n     * @private\n     * @param {} projection\n     * @param {} vertices\n     * @param {} axis\n     */\n    Collision._projectToAxis = function(projection, vertices, axis) {\n        var min = vertices[0].x * axis.x + vertices[0].y * axis.y,\n            max = min;\n\n        for (var i = 1; i < vertices.length; i += 1) {\n            var dot = vertices[i].x * axis.x + vertices[i].y * axis.y;\n\n            if (dot > max) { \n                max = dot; \n            } else if (dot < min) { \n                min = dot; \n            }\n        }\n\n        projection.min = min;\n        projection.max = max;\n    };\n\n    /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {vector} normal\n     * @param {number} direction\n     * @return [vector]\n     */\n    Collision._findSupports = function(bodyA, bodyB, normal, direction) {\n        var vertices = bodyB.vertices,\n            verticesLength = vertices.length,\n            bodyAPositionX = bodyA.position.x,\n            bodyAPositionY = bodyA.position.y,\n            normalX = normal.x * direction,\n            normalY = normal.y * direction,\n            nearestDistance = Number.MAX_VALUE,\n            vertexA,\n            vertexB,\n            vertexC,\n            distance,\n            j;\n\n        // find deepest vertex relative to the axis\n        for (j = 0; j < verticesLength; j += 1) {\n            vertexB = vertices[j];\n            distance = normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y);\n\n            // convex hill-climbing\n            if (distance < nearestDistance) {\n                nearestDistance = distance;\n                vertexA = vertexB;\n            }\n        }\n\n        // measure next vertex\n        vertexC = vertices[(verticesLength + vertexA.index - 1) % verticesLength];\n        nearestDistance = normalX * (bodyAPositionX - vertexC.x) + normalY * (bodyAPositionY - vertexC.y);\n\n        // compare with previous vertex\n        vertexB = vertices[(vertexA.index + 1) % verticesLength];\n        if (normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y) < nearestDistance) {\n            _supports[0] = vertexA;\n            _supports[1] = vertexB;\n\n            return _supports;\n        }\n\n        _supports[0] = vertexA;\n        _supports[1] = vertexC;\n\n        return _supports;\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A reference to the pair using this collision record, if there is one.\n     *\n     * @property pair\n     * @type {pair|null}\n     * @default null\n     */\n\n    /**\n     * A flag that indicates if the bodies were colliding when the collision was last updated.\n     * \n     * @property collided\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The first body part represented by the collision (see also `collision.parentA`).\n     * \n     * @property bodyA\n     * @type body\n     */\n\n    /**\n     * The second body part represented by the collision (see also `collision.parentB`).\n     * \n     * @property bodyB\n     * @type body\n     */\n\n    /**\n     * The first body represented by the collision (i.e. `collision.bodyA.parent`).\n     * \n     * @property parentA\n     * @type body\n     */\n\n    /**\n     * The second body represented by the collision (i.e. `collision.bodyB.parent`).\n     * \n     * @property parentB\n     * @type body\n     */\n\n    /**\n     * A `Number` that represents the minimum separating distance between the bodies along the collision normal.\n     *\n     * @readOnly\n     * @property depth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A normalised `Vector` that represents the direction between the bodies that provides the minimum separating distance.\n     *\n     * @property normal\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A normalised `Vector` that is the tangent direction to the collision normal.\n     *\n     * @property tangent\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that represents the direction and depth of the collision.\n     *\n     * @property penetration\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * An array of body vertices that represent the support points in the collision.\n     * These are the deepest vertices (along the collision normal) of each body that are contained by the other body's vertices.\n     *\n     * @property supports\n     * @type vector[]\n     * @default []\n     */\n\n})();\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/\n\nvar Pair = {};\n\nmodule.exports = Pair;\n\nvar Contact = __webpack_require__(16);\n\n(function() {\n    \n    /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */\n    Pair.create = function(collision, timestamp) {\n        var bodyA = collision.bodyA,\n            bodyB = collision.bodyB;\n\n        var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            collision: collision,\n            contacts: [],\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            confirmedActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: 0,\n            friction: 0,\n            frictionStatic: 0,\n            restitution: 0,\n            slop: 0\n        };\n\n        Pair.update(pair, collision, timestamp);\n\n        return pair;\n    };\n\n    /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */\n    Pair.update = function(pair, collision, timestamp) {\n        var contacts = pair.contacts,\n            supports = collision.supports,\n            activeContacts = pair.activeContacts,\n            parentA = collision.parentA,\n            parentB = collision.parentB,\n            parentAVerticesLength = parentA.vertices.length;\n        \n        pair.isActive = true;\n        pair.timeUpdated = timestamp;\n        pair.collision = collision;\n        pair.separation = collision.depth;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = parentA.friction < parentB.friction ? parentA.friction : parentB.friction;\n        pair.frictionStatic = parentA.frictionStatic > parentB.frictionStatic ? parentA.frictionStatic : parentB.frictionStatic;\n        pair.restitution = parentA.restitution > parentB.restitution ? parentA.restitution : parentB.restitution;\n        pair.slop = parentA.slop > parentB.slop ? parentA.slop : parentB.slop;\n\n        collision.pair = pair;\n        activeContacts.length = 0;\n        \n        for (var i = 0; i < supports.length; i++) {\n            var support = supports[i],\n                contactId = support.body === parentA ? support.index : parentAVerticesLength + support.index,\n                contact = contacts[contactId];\n\n            if (contact) {\n                activeContacts.push(contact);\n            } else {\n                activeContacts.push(contacts[contactId] = Contact.create(support));\n            }\n        }\n    };\n    \n    /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */\n    Pair.setActive = function(pair, isActive, timestamp) {\n        if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n        } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n        }\n    };\n\n    /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */\n    Pair.id = function(bodyA, bodyB) {\n        if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n        } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/\n\nvar Constraint = {};\n\nmodule.exports = Constraint;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\nvar Sleeping = __webpack_require__(7);\nvar Bounds = __webpack_require__(1);\nvar Axes = __webpack_require__(11);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Constraint._warming = 0.4;\n    Constraint._torqueDampen = 1;\n    Constraint._minLength = 0.000001;\n\n    /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */\n    Constraint.create = function(options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA)\n            constraint.pointA = { x: 0, y: 0 };\n        if (constraint.bodyB && !constraint.pointB)\n            constraint.pointB = { x: 0, y: 0 };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n    \n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n        constraint.damping = constraint.damping || 0;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n        constraint.plugin = {};\n\n        // render\n        var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n        };\n\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n        } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n        }\n\n        constraint.render = Common.extend(render, constraint.render);\n\n        return constraint;\n    };\n\n    /**\n     * Prepares for solving by constraint warming.\n     * @private\n     * @method preSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.preSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n        }\n    };\n\n    /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} delta\n     */\n    Constraint.solveAll = function(constraints, delta) {\n        var timeScale = Common.clamp(delta / Common._baseDelta, 0, 1);\n\n        // Solve fixed constraints first.\n        for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic),\n                fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (fixedA || fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n\n        // Solve free constraints last.\n        for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic);\n            fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (!fixedA && !fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n    };\n\n    /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */\n    Constraint.solve = function(constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB;\n\n        if (!bodyA && !bodyB)\n            return;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n        }\n        \n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n        }\n\n        var pointAWorld = pointA,\n            pointBWorld = pointB;\n\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n\n        if (!pointAWorld || !pointBWorld)\n            return;\n\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n            currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n        }\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n            isRigid = constraint.stiffness >= 1 || constraint.length === 0,\n            stiffness = isRigid ? constraint.stiffness * timeScale \n                : constraint.stiffness * timeScale * timeScale,\n            damping = constraint.damping * timeScale,\n            force = Vector.mult(delta, difference * stiffness),\n            massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n            inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n            resistanceTotal = massTotal + inertiaTotal,\n            torque,\n            share,\n            normal,\n            normalVelocity,\n            relativeVelocity;\n    \n        if (damping > 0) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n\n            relativeVelocity = Vector.sub(\n                bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero,\n                bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero\n            );\n\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n        }\n\n        if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share;\n\n            // apply forces\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share;\n\n            // apply damping\n            if (damping > 0) {\n                bodyA.positionPrev.x -= damping * normal.x * normalVelocity * share;\n                bodyA.positionPrev.y -= damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointA, force) / resistanceTotal) * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share;\n            \n            // apply forces\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share;\n\n            // apply damping\n            if (damping > 0) {\n                bodyB.positionPrev.x += damping * normal.x * normalVelocity * share;\n                bodyB.positionPrev.y += damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointB, force) / resistanceTotal) * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n        }\n\n    };\n\n    /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.postSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            Sleeping.set(body, false);\n\n            // update geometry and reset\n            for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                \n                Vertices.translate(part.vertices, impulse);\n\n                if (j > 0) {\n                    part.position.x += impulse.x;\n                    part.position.y += impulse.y;\n                }\n\n                if (impulse.angle !== 0) {\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\n                    Axes.rotate(part.axes, impulse.angle);\n                    if (j > 0) {\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                    }\n                }\n\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n            }\n\n            // dampen the cached impulse for warming next step\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n        }\n    };\n\n    /**\n     * Returns the world-space position of `constraint.pointA`, accounting for `constraint.bodyA`.\n     * @method pointAWorld\n     * @param {constraint} constraint\n     * @returns {vector} the world-space position\n     */\n    Constraint.pointAWorld = function(constraint) {\n        return {\n            x: (constraint.bodyA ? constraint.bodyA.position.x : 0) \n                + (constraint.pointA ? constraint.pointA.x : 0),\n            y: (constraint.bodyA ? constraint.bodyA.position.y : 0) \n                + (constraint.pointA ? constraint.pointA.y : 0)\n        };\n    };\n\n    /**\n     * Returns the world-space position of `constraint.pointB`, accounting for `constraint.bodyB`.\n     * @method pointBWorld\n     * @param {constraint} constraint\n     * @returns {vector} the world-space position\n     */\n    Constraint.pointBWorld = function(constraint) {\n        return {\n            x: (constraint.bodyB ? constraint.bodyB.position.x : 0) \n                + (constraint.pointB ? constraint.pointB.x : 0),\n            y: (constraint.bodyB ? constraint.bodyB.position.y : 0) \n                + (constraint.pointB ? constraint.pointB.y : 0)\n        };\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the constraint rendering type. \n     * The possible values are 'line', 'pin', 'spring'.\n     * An appropriate render type will be automatically chosen unless one is given in options.\n     *\n     * @property render.type\n     * @type string\n     * @default 'line'\n     */\n\n    /**\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\n     *\n     * @property render.anchors\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the damping of the constraint, \n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n     * A value of `0` means the constraint will apply no damping.\n     *\n     * @property damping\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that specifies the target resting length of the constraint. \n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/\n\nvar Axes = {};\n\nmodule.exports = Axes;\n\nvar Vector = __webpack_require__(2);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */\n    Axes.fromVertices = function(vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length, \n                normal = Vector.normalise({ \n                    x: vertices[j].y - vertices[i].y, \n                    y: vertices[i].x - vertices[j].x\n                }),\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\n            \n            // limit precision\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n        }\n\n        return Common.values(axes);\n    };\n\n    /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */\n    Axes.rotate = function(axes, angle) {\n        if (angle === 0)\n            return;\n        \n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/\n\n// TODO: true circle bodies\n\nvar Bodies = {};\n\nmodule.exports = Bodies;\n\nvar Vertices = __webpack_require__(3);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(4);\nvar Bounds = __webpack_require__(1);\nvar Vector = __webpack_require__(2);\n\n(function() {\n\n    /**\n     * Creates a new rigid body model with a rectangle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */\n    Bodies.rectangle = function(x, y, width, height, options) {\n        options = options || {};\n\n        var rectangle = { \n            label: 'Rectangle Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, rectangle, options));\n    };\n    \n    /**\n     * Creates a new rigid body model with a trapezoid hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\n        options = options || {};\n\n        slope *= 0.5;\n        var roof = (1 - (slope * 2)) * width;\n        \n        var x1 = width * slope,\n            x2 = x1 + roof,\n            x3 = x2 + x1,\n            verticesPath;\n\n        if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        }\n\n        var trapezoid = { \n            label: 'Trapezoid Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(verticesPath)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, trapezoid, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a circle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */\n    Bodies.circle = function(x, y, radius, options, maxSides) {\n        options = options || {};\n\n        var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n        };\n        \n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1)\n            sides += 1;\n\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */\n    Bodies.polygon = function(x, y, sides, radius, options) {\n        options = options || {};\n\n        if (sides < 3)\n            return Bodies.circle(x, y, radius, options);\n\n        var theta = 2 * Math.PI / sides,\n            path = '',\n            offset = theta * 0.5;\n\n        for (var i = 0; i < sides; i += 1) {\n            var angle = offset + (i * theta),\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n\n        var polygon = { \n            label: 'Polygon Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(path)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, polygon, options));\n    };\n\n    /**\n     * Utility to create a compound body based on set(s) of vertices.\n     * \n     * _Note:_ To optionally enable automatic concave vertices decomposition the [poly-decomp](https://github.com/schteppe/poly-decomp.js) \n     * package must be first installed and provided see `Common.setDecomp`, otherwise the convex hull of each vertex set will be used.\n     * \n     * The resulting vertices are reorientated about their centre of mass,\n     * and offset such that `body.position` corresponds to this point.\n     * \n     * The resulting offset may be found if needed by subtracting `body.bounds` from the original input bounds.\n     * To later move the centre of mass see `Body.setCentre`.\n     * \n     * Note that automatic conconcave decomposition results are not always optimal. \n     * For best results, simplify the input vertices as much as possible first.\n     * By default this function applies some addtional simplification to help.\n     * \n     * Some outputs may also require further manual processing afterwards to be robust.\n     * In particular some parts may need to be overlapped to avoid collision gaps.\n     * Thin parts and sharp points should be avoided or removed where possible.\n     *\n     * The options parameter object specifies any `Matter.Body` properties you wish to override the defaults.\n     * \n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param {array} vertexSets One or more arrays of vertex points e.g. `[[{ x: 0, y: 0 }...], ...]`.\n     * @param {object} [options] The body options.\n     * @param {bool} [flagInternal=false] Optionally marks internal edges with `isInternal`.\n     * @param {number} [removeCollinear=0.01] Threshold when simplifying vertices along the same edge.\n     * @param {number} [minimumArea=10] Threshold when removing small parts.\n     * @param {number} [removeDuplicatePoints=0.01] Threshold when simplifying nearby vertices.\n     * @return {body}\n     */\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea, removeDuplicatePoints) {\n        var decomp = Common.getDecomp(),\n            canDecomp,\n            body,\n            parts,\n            isConvex,\n            isConcave,\n            vertices,\n            i,\n            j,\n            k,\n            v,\n            z;\n\n        // check decomp is as expected\n        canDecomp = Boolean(decomp && decomp.quickDecomp);\n\n        options = options || {};\n        parts = [];\n\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n        removeDuplicatePoints = typeof removeDuplicatePoints !== 'undefined' ? removeDuplicatePoints : 0.01;\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n        }\n\n        for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n            isConcave = !isConvex;\n\n            if (isConcave && !canDecomp) {\n                Common.warnOnce(\n                    'Bodies.fromVertices: Install the \\'poly-decomp\\' library and use Common.setDecomp or provide \\'decomp\\' as a global to decompose concave vertices.'\n                );\n            }\n\n            if (isConvex || !canDecomp) {\n                if (isConvex) {\n                    vertices = Vertices.clockwiseSort(vertices);\n                } else {\n                    // fallback to convex hull when decomposition is not possible\n                    vertices = Vertices.hull(vertices);\n                }\n\n                parts.push({\n                    position: { x: x, y: y },\n                    vertices: vertices\n                });\n            } else {\n                // initialise a decomposition\n                var concave = vertices.map(function(vertex) {\n                    return [vertex.x, vertex.y];\n                });\n\n                // vertices are concave and simple, we can decompose into parts\n                decomp.makeCCW(concave);\n                if (removeCollinear !== false)\n                    decomp.removeCollinearPoints(concave, removeCollinear);\n                if (removeDuplicatePoints !== false && decomp.removeDuplicatePoints)\n                    decomp.removeDuplicatePoints(concave, removeDuplicatePoints);\n\n                // use the quick decomposition algorithm (Bayazit)\n                var decomposed = decomp.quickDecomp(concave);\n\n                // for each decomposed chunk\n                for (i = 0; i < decomposed.length; i++) {\n                    var chunk = decomposed[i];\n\n                    // convert vertices into the correct structure\n                    var chunkVertices = chunk.map(function(vertices) {\n                        return {\n                            x: vertices[0],\n                            y: vertices[1]\n                        };\n                    });\n\n                    // skip small chunks\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\n                        continue;\n\n                    // create a compound part\n                    parts.push({\n                        position: Vertices.centre(chunkVertices),\n                        vertices: chunkVertices\n                    });\n                }\n            }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n                var partA = parts[i];\n\n                for (j = i + 1; j < parts.length; j++) {\n                    var partB = parts[j];\n\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                        var pav = partA.vertices,\n                            pbv = partB.vertices;\n\n                        // iterate vertices of both parts\n                        for (k = 0; k < partA.vertices.length; k++) {\n                            for (z = 0; z < partB.vertices.length; z++) {\n                                // find distances between the vertices\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                                // if both vertices are very close, consider the edge concident (internal)\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\n                                    pav[k].isInternal = true;\n                                    pbv[z].isInternal = true;\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n\n        if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\n\n            // offset such that body.position is at the centre off mass\n            Body.setPosition(body, { x: x, y: y });\n\n            return body;\n        } else {\n            return parts[0];\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Detector` module contains methods for efficiently detecting collisions between a list of bodies using a broadphase algorithm.\n*\n* @class Detector\n*/\n\nvar Detector = {};\n\nmodule.exports = Detector;\n\nvar Common = __webpack_require__(0);\nvar Collision = __webpack_require__(8);\n\n(function() {\n\n    /**\n     * Creates a new collision detector.\n     * @method create\n     * @param {} options\n     * @return {detector} A new collision detector\n     */\n    Detector.create = function(options) {\n        var defaults = {\n            bodies: [],\n            pairs: null\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * Sets the list of bodies in the detector.\n     * @method setBodies\n     * @param {detector} detector\n     * @param {body[]} bodies\n     */\n    Detector.setBodies = function(detector, bodies) {\n        detector.bodies = bodies.slice(0);\n    };\n\n    /**\n     * Clears the detector including its list of bodies.\n     * @method clear\n     * @param {detector} detector\n     */\n    Detector.clear = function(detector) {\n        detector.bodies = [];\n    };\n\n    /**\n     * Efficiently finds all collisions among all the bodies in `detector.bodies` using a broadphase algorithm.\n     * \n     * _Note:_ The specific ordering of collisions returned is not guaranteed between releases and may change for performance reasons.\n     * If a specific ordering is required then apply a sort to the resulting array.\n     * @method collisions\n     * @param {detector} detector\n     * @return {collision[]} collisions\n     */\n    Detector.collisions = function(detector) {\n        var collisions = [],\n            pairs = detector.pairs,\n            bodies = detector.bodies,\n            bodiesLength = bodies.length,\n            canCollide = Detector.canCollide,\n            collides = Collision.collides,\n            i,\n            j;\n\n        bodies.sort(Detector._compareBoundsX);\n\n        for (i = 0; i < bodiesLength; i++) {\n            var bodyA = bodies[i],\n                boundsA = bodyA.bounds,\n                boundXMax = bodyA.bounds.max.x,\n                boundYMax = bodyA.bounds.max.y,\n                boundYMin = bodyA.bounds.min.y,\n                bodyAStatic = bodyA.isStatic || bodyA.isSleeping,\n                partsALength = bodyA.parts.length,\n                partsASingle = partsALength === 1;\n\n            for (j = i + 1; j < bodiesLength; j++) {\n                var bodyB = bodies[j],\n                    boundsB = bodyB.bounds;\n\n                if (boundsB.min.x > boundXMax) {\n                    break;\n                }\n\n                if (boundYMax < boundsB.min.y || boundYMin > boundsB.max.y) {\n                    continue;\n                }\n\n                if (bodyAStatic && (bodyB.isStatic || bodyB.isSleeping)) {\n                    continue;\n                }\n\n                if (!canCollide(bodyA.collisionFilter, bodyB.collisionFilter)) {\n                    continue;\n                }\n\n                var partsBLength = bodyB.parts.length;\n\n                if (partsASingle && partsBLength === 1) {\n                    var collision = collides(bodyA, bodyB, pairs);\n\n                    if (collision) {\n                        collisions.push(collision);\n                    }\n                } else {\n                    var partsAStart = partsALength > 1 ? 1 : 0,\n                        partsBStart = partsBLength > 1 ? 1 : 0;\n                    \n                    for (var k = partsAStart; k < partsALength; k++) {\n                        var partA = bodyA.parts[k],\n                            boundsA = partA.bounds;\n\n                        for (var z = partsBStart; z < partsBLength; z++) {\n                            var partB = bodyB.parts[z],\n                                boundsB = partB.bounds;\n\n                            if (boundsA.min.x > boundsB.max.x || boundsA.max.x < boundsB.min.x\n                                || boundsA.max.y < boundsB.min.y || boundsA.min.y > boundsB.max.y) {\n                                continue;\n                            }\n\n                            var collision = collides(partA, partB, pairs);\n\n                            if (collision) {\n                                collisions.push(collision);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */\n    Detector.canCollide = function(filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0)\n            return filterA.group > 0;\n\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n    };\n\n    /**\n     * The comparison function used in the broadphase algorithm.\n     * Returns the signed delta of the bodies bounds on the x-axis.\n     * @private\n     * @method _sortCompare\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {number} The signed delta used for sorting\n     */\n    Detector._compareBoundsX = function(bodyA, bodyB) {\n        return bodyA.bounds.min.x - bodyB.bounds.min.x;\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * The array of `Matter.Body` between which the detector finds collisions.\n     * \n     * _Note:_ The order of bodies in this array _is not fixed_ and will be continually managed by the detector.\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * Optional. A `Matter.Pairs` object from which previous collision objects may be reused. Intended for internal `Matter.Engine` usage.\n     * @property pairs\n     * @type {pairs|null}\n     * @default null\n     */\n\n})();\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/\n\nvar Mouse = {};\n\nmodule.exports = Mouse;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */\n    Mouse.create = function(element) {\n        var mouse = {};\n\n        if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n        \n        mouse.element = element || document.body;\n        mouse.absolute = { x: 0, y: 0 };\n        mouse.position = { x: 0, y: 0 };\n        mouse.mousedownPosition = { x: 0, y: 0 };\n        mouse.mouseupPosition = { x: 0, y: 0 };\n        mouse.offset = { x: 0, y: 0 };\n        mouse.scale = { x: 1, y: 1 };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = parseInt(mouse.element.getAttribute('data-pixel-ratio'), 10) || 1;\n\n        mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n        };\n        \n        mouse.mousemove = function(event) { \n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n        };\n        \n        mouse.mousedown = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            } else {\n                mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n        };\n        \n        mouse.mouseup = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                event.preventDefault();\n            }\n            \n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n        };\n\n        mouse.mousewheel = function(event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n        };\n\n        Mouse.setElement(mouse, mouse.element);\n\n        return mouse;\n    };\n\n    /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */\n    Mouse.setElement = function(mouse, element) {\n        mouse.element = element;\n\n        element.addEventListener('mousemove', mouse.mousemove);\n        element.addEventListener('mousedown', mouse.mousedown);\n        element.addEventListener('mouseup', mouse.mouseup);\n        \n        element.addEventListener('mousewheel', mouse.mousewheel);\n        element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n\n        element.addEventListener('touchmove', mouse.mousemove);\n        element.addEventListener('touchstart', mouse.mousedown);\n        element.addEventListener('touchend', mouse.mouseup);\n    };\n\n    /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */\n    Mouse.clearSourceEvents = function(mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n    };\n\n    /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */\n    Mouse.setOffset = function(mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */\n    Mouse.setScale = function(mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n    \n    /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */\n    Mouse._getRelativeMousePosition = function(event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n            rootNode = (document.documentElement || document.body.parentNode || document.body),\n            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\n            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\n            touches = event.changedTouches,\n            x, y;\n        \n        if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n        }\n\n        return { \n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n        };\n    };\n\n})();\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n*\n* @class Plugin\n*/\n\nvar Plugin = {};\n\nmodule.exports = Plugin;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Plugin._registry = {};\n\n    /**\n     * Registers a plugin object so it can be resolved later by name.\n     * @method register\n     * @param plugin {} The plugin to register.\n     * @return {object} The plugin.\n     */\n    Plugin.register = function(plugin) {\n        if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n        }\n\n        if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n                Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n                Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n        } else {\n            Plugin._registry[plugin.name] = plugin;\n        }\n\n        return plugin;\n    };\n\n    /**\n     * Resolves a dependency to a plugin object from the registry if it exists. \n     * The `dependency` may contain a version, but only the name matters when resolving.\n     * @method resolve\n     * @param dependency {string} The dependency.\n     * @return {object} The plugin if resolved, otherwise `undefined`.\n     */\n    Plugin.resolve = function(dependency) {\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\n    };\n\n    /**\n     * Returns a pretty printed plugin name and version.\n     * @method toString\n     * @param plugin {} The plugin.\n     * @return {string} Pretty printed plugin name and version.\n     */\n    Plugin.toString = function(plugin) {\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n    };\n\n    /**\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\n     * This means it must define the following properties:\n     * - `name`\n     * - `version`\n     * - `install`\n     * @method isPlugin\n     * @param obj {} The obj to test.\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n     */\n    Plugin.isPlugin = function(obj) {\n        return obj && obj.name && obj.version && obj.install;\n    };\n\n    /**\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\n     * @method isUsed\n     * @param module {} The module.\n     * @param name {string} The plugin name.\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n     */\n    Plugin.isUsed = function(module, name) {\n        return module.used.indexOf(name) > -1;\n    };\n\n    /**\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n     * If `plugin.for` is not specified then it is assumed to be applicable.\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n     * @method isFor\n     * @param plugin {} The plugin.\n     * @param module {} The module.\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n     */\n    Plugin.isFor = function(plugin, module) {\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n        return !plugin.for || (module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range));\n    };\n\n    /**\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\n     * Plugins may be specified either by their name or a reference to the plugin object.\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\n     * - A green tick \u2705 indicates a dependency was resolved and installed.\n     * - An orange diamond \uD83D\uDD36 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n     * - A red cross \u274C indicates a dependency could not be resolved.\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n     * @method use\n     * @param module {} The module install plugins on.\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n     */\n    Plugin.use = function(module, plugins) {\n        module.uses = (module.uses || []).concat(plugins || []);\n\n        if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n        }\n\n        var dependencies = Plugin.dependencies(module),\n            sortedDependencies = Common.topologicalSort(dependencies),\n            status = [];\n\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n                continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n                status.push('\u274C ' + sortedDependencies[i]);\n                continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n                continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n                plugin._warned = true;\n            }\n\n            if (plugin.install) {\n                plugin.install(module);\n            } else {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n                plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n                status.push('\uD83D\uDD36 ' + Plugin.toString(plugin));\n                delete plugin._warned;\n            } else {\n                status.push('\u2705 ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n        }\n\n        if (status.length > 0) {\n            Common.info(status.join('  '));\n        }\n    };\n\n    /**\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n     * @method dependencies\n     * @param module {} The module.\n     * @return {object} A dependency graph.\n     */\n    Plugin.dependencies = function(module, tracked) {\n        var parsedBase = Plugin.dependencyParse(module),\n            name = parsedBase.name;\n\n        tracked = tracked || {};\n\n        if (name in tracked) {\n            return;\n        }\n\n        module = Plugin.resolve(module) || module;\n\n        tracked[name] = Common.map(module.uses || [], function(dependency) {\n            if (Plugin.isPlugin(dependency)) {\n                Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy',\n                    Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.'\n                );\n\n                resolved._warned = true;\n                module._warned = true;\n            } else if (!resolved) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(dependency), 'used by',\n                    Plugin.toString(parsedBase), 'could not be resolved.'\n                );\n\n                module._warned = true;\n            }\n\n            return parsed.name;\n        });\n\n        for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n        }\n\n        return tracked;\n    };\n\n    /**\n     * Parses a dependency string into its components.\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\n     * @method dependencyParse\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n     * @return {object} The dependency parsed into its components.\n     */\n    Plugin.dependencyParse = function(dependency) {\n        if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-+]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n                Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n                name: dependency.split('@')[0],\n                range: dependency.split('@')[1] || '*'\n            };\n        }\n\n        return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n        };\n    };\n\n    /**\n     * Parses a version string into its components.  \n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n     * Only the following range types are supported:\n     * - Tilde ranges e.g. `~1.2.3`\n     * - Caret ranges e.g. `^1.2.3`\n     * - Greater than ranges e.g. `>1.2.3`\n     * - Greater than or equal ranges e.g. `>=1.2.3`\n     * - Exact version e.g. `1.2.3`\n     * - Any version `*`\n     * @method versionParse\n     * @param range {string} The version string.\n     * @return {object} The version range parsed into its components.\n     */\n    Plugin.versionParse = function(range) {\n        var pattern = /^(\\*)|(\\^|~|>=|>)?\\s*((\\d+)\\.(\\d+)\\.(\\d+))(-[0-9A-Za-z-+]+)?$/;\n\n        if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n        }\n\n        var parts = pattern.exec(range);\n        var major = Number(parts[4]);\n        var minor = Number(parts[5]);\n        var patch = Number(parts[6]);\n\n        return {\n            isRange: Boolean(parts[1] || parts[2]),\n            version: parts[3],\n            range: range,\n            operator: parts[1] || parts[2] || '',\n            major: major,\n            minor: minor,\n            patch: patch,\n            parts: [major, minor, patch],\n            prerelease: parts[7],\n            number: major * 1e8 + minor * 1e4 + patch\n        };\n    };\n\n    /**\n     * Returns `true` if `version` satisfies the given `range`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n     * @method versionSatisfies\n     * @param version {string} The version string.\n     * @param range {string} The range string.\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n     */\n    Plugin.versionSatisfies = function(version, range) {\n        range = range || '*';\n\n        var r = Plugin.versionParse(range),\n            v = Plugin.versionParse(version);\n\n        if (r.isRange) {\n            if (r.operator === '*' || version === '*') {\n                return true;\n            }\n\n            if (r.operator === '>') {\n                return v.number > r.number;\n            }\n\n            if (r.operator === '>=') {\n                return v.number >= r.number;\n            }\n\n            if (r.operator === '~') {\n                return v.major === r.major && v.minor === r.minor && v.patch >= r.patch;\n            }\n\n            if (r.operator === '^') {\n                if (r.major > 0) {\n                    return v.major === r.major && v.number >= r.number;\n                }\n\n                if (r.minor > 0) {\n                    return v.minor === r.minor && v.patch >= r.patch;\n                }\n\n                return v.patch === r.patch;\n            }\n        }\n\n        return version === range || version === '*';\n    };\n\n})();\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/\n\nvar Contact = {};\n\nmodule.exports = Contact;\n\n(function() {\n\n    /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} vertex\n     * @return {contact} A new contact\n     */\n    Contact.create = function(vertex) {\n        return {\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n        };\n    };\n\n})();\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/\n\nvar Engine = {};\n\nmodule.exports = Engine;\n\nvar Sleeping = __webpack_require__(7);\nvar Resolver = __webpack_require__(18);\nvar Detector = __webpack_require__(13);\nvar Pairs = __webpack_require__(19);\nvar Events = __webpack_require__(5);\nvar Composite = __webpack_require__(6);\nvar Constraint = __webpack_require__(10);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(4);\n\n(function() {\n\n    /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */\n    Engine.create = function(options) {\n        options = options || {};\n\n        var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            gravity: {\n                x: 0,\n                y: 1,\n                scale: 0.001\n            },\n            timing: {\n                timestamp: 0,\n                timeScale: 1,\n                lastDelta: 0,\n                lastElapsed: 0\n            }\n        };\n\n        var engine = Common.extend(defaults, options);\n\n        engine.world = options.world || Composite.create({ label: 'World' });\n        engine.pairs = options.pairs || Pairs.create();\n        engine.detector = options.detector || Detector.create();\n\n        // for temporary back compatibility only\n        engine.grid = { buckets: [] };\n        engine.world.gravity = engine.gravity;\n        engine.broadphase = engine.grid;\n        engine.metrics = {};\n        \n        return engine;\n    };\n\n    /**\n     * Moves the simulation forward in time by `delta` milliseconds.\n     * Triggers `beforeUpdate` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     */\n    Engine.update = function(engine, delta) {\n        var startTime = Common.now();\n\n        var world = engine.world,\n            detector = engine.detector,\n            pairs = engine.pairs,\n            timing = engine.timing,\n            timestamp = timing.timestamp,\n            i;\n\n        delta = typeof delta !== 'undefined' ? delta : Common._baseDelta;\n        delta *= timing.timeScale;\n\n        // increment timestamp\n        timing.timestamp += delta;\n        timing.lastDelta = delta;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp,\n            delta: delta\n        };\n\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get all bodies and all constraints in the world\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world);\n\n        // if the world has changed\n        if (world.isModified) {\n            // update the detector bodies\n            Detector.setBodies(detector, allBodies);\n\n            // reset all composite modified flags\n            Composite.setModified(world, false, false, true);\n        }\n\n        // update sleeping if enabled\n        if (engine.enableSleeping)\n            Sleeping.update(allBodies, delta);\n\n        // apply gravity to all bodies\n        Engine._bodiesApplyGravity(allBodies, engine.gravity);\n\n        // update all body position and rotation by integration\n        if (delta > 0) {\n            Engine._bodiesUpdate(allBodies, delta);\n        }\n\n        // update all constraints (first pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, delta);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // find all collisions\n        detector.pairs = engine.pairs;\n        var collisions = Detector.collisions(detector);\n\n        // update collision pairs\n        Pairs.update(pairs, collisions, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping)\n            Sleeping.afterCollisions(pairs.list);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0)\n            Events.trigger(engine, 'collisionStart', { pairs: pairs.collisionStart });\n\n        // iteratively resolve position between collisions\n        var positionDamping = Common.clamp(20 / engine.positionIterations, 0, 1);\n        \n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, delta, positionDamping);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // update all constraints (second pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, delta);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, delta);\n        }\n\n        // update body speed and velocity properties\n        Engine._bodiesUpdateVelocities(allBodies);\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0)\n            Events.trigger(engine, 'collisionActive', { pairs: pairs.collisionActive });\n\n        if (pairs.collisionEnd.length > 0)\n            Events.trigger(engine, 'collisionEnd', { pairs: pairs.collisionEnd });\n\n        // clear force buffers\n        Engine._bodiesClearForces(allBodies);\n\n        Events.trigger(engine, 'afterUpdate', event);\n\n        // log the time elapsed computing this update\n        engine.timing.lastElapsed = Common.now() - startTime;\n\n        return engine;\n    };\n    \n    /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */\n    Engine.merge = function(engineA, engineB) {\n        Common.extend(engineA, engineB);\n        \n        if (engineB.world) {\n            engineA.world = engineB.world;\n\n            Engine.clear(engineA);\n\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                Sleeping.set(body, false);\n                body.id = Common.nextId();\n            }\n        }\n    };\n\n    /**\n     * Clears the engine pairs and detector.\n     * @method clear\n     * @param {engine} engine\n     */\n    Engine.clear = function(engine) {\n        Pairs.clear(engine.pairs);\n        Detector.clear(engine.detector);\n    };\n\n    /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method _bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */\n    Engine._bodiesClearForces = function(bodies) {\n        var bodiesLength = bodies.length;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            var body = bodies[i];\n\n            // reset force buffers\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n        }\n    };\n\n    /**\n     * Applies gravitational acceleration to all `bodies`.\n     * This models a [uniform gravitational field](https://en.wikipedia.org/wiki/Gravity_of_Earth), similar to near the surface of a planet.\n     * \n     * @method _bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */\n    Engine._bodiesApplyGravity = function(bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001,\n            bodiesLength = bodies.length;\n\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\n            return;\n        }\n        \n        for (var i = 0; i < bodiesLength; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            // add the resultant force of gravity\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n        }\n    };\n\n    /**\n     * Applies `Body.update` to all given `bodies`.\n     * @method _bodiesUpdate\n     * @private\n     * @param {body[]} bodies\n     * @param {number} delta The amount of time elapsed between updates\n     */\n    Engine._bodiesUpdate = function(bodies, delta) {\n        var bodiesLength = bodies.length;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            Body.update(body, delta);\n        }\n    };\n\n    /**\n     * Applies `Body.updateVelocities` to all given `bodies`.\n     * @method _bodiesUpdateVelocities\n     * @private\n     * @param {body[]} bodies\n     */\n    Engine._bodiesUpdateVelocities = function(bodies) {\n        var bodiesLength = bodies.length;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            Body.updateVelocities(bodies[i]);\n        }\n    };\n\n    /**\n     * A deprecated alias for `Runner.run`, use `Matter.Runner.run(engine)` instead and see `Matter.Runner` for more information.\n     * @deprecated use Matter.Runner.run(engine) instead\n     * @method run\n     * @param {engine} engine\n     */\n\n    /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {object} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {number} event.delta The delta time in milliseconds value used in the update\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {object} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {number} event.delta The delta time in milliseconds value used in the update\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {number} event.delta The delta time in milliseconds value used in the update\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {number} event.delta The delta time in milliseconds value used in the update\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {number} event.delta The delta time in milliseconds value used in the update\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */\n\n    /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */\n\n    /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * An `Object` containing properties regarding the timing systems of the engine. \n     *\n     * @property timing\n     * @type object\n     */\n\n    /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n     * It is incremented on every `Engine.update` by the given `delta` argument. \n     * \n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that represents the total execution time elapsed during the last `Engine.update` in milliseconds.\n     * It is updated by timing from the start of the last `Engine.update` call until it ends.\n     *\n     * This value will also include the total execution time of all event handlers directly or indirectly triggered by the engine update.\n     * \n     * @property timing.lastElapsed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that represents the `delta` value used in the last engine update.\n     * \n     * @property timing.lastDelta\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Matter.Detector` instance.\n     *\n     * @property detector\n     * @type detector\n     * @default a Matter.Detector instance\n     */\n\n    /**\n     * A `Matter.Grid` instance.\n     *\n     * @deprecated replaced by `engine.detector`\n     * @property grid\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * Replaced by and now alias for `engine.grid`.\n     *\n     * @deprecated replaced by `engine.detector`\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * The root `Matter.Composite` instance that will contain all bodies, constraints and other composites to be simulated by this engine.\n     *\n     * @property world\n     * @type composite\n     * @default a Matter.Composite instance\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * An optional gravitational acceleration applied to all bodies in `engine.world` on every update.\n     * \n     * This models a [uniform gravitational field](https://en.wikipedia.org/wiki/Gravity_of_Earth), similar to near the surface of a planet. For gravity in other contexts, disable this and apply forces as needed.\n     * \n     * To disable set the `scale` component to `0`.\n     * \n     * This is split into three components for ease of use:  \n     * a normalised direction (`x` and `y`) and magnitude (`scale`).\n     *\n     * @property gravity\n     * @type object\n     */\n\n    /**\n     * The gravitational direction normal `x` component, to be multiplied by `gravity.scale`.\n     * \n     * @property gravity.x\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * The gravitational direction normal `y` component, to be multiplied by `gravity.scale`.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * The magnitude of the gravitational acceleration.\n     * \n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */\n\n})();\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/\n\nvar Resolver = {};\n\nmodule.exports = Resolver;\n\nvar Vertices = __webpack_require__(3);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\n\n(function() {\n\n    Resolver._restingThresh = 2;\n    Resolver._restingThreshTangent = Math.sqrt(6);\n    Resolver._positionDampen = 0.9;\n    Resolver._positionWarming = 0.8;\n    Resolver._frictionNormalMultiplier = 5;\n    Resolver._frictionMaxStatic = Number.MAX_VALUE;\n\n    /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolvePosition = function(pairs) {\n        var i,\n            pair,\n            activeCount,\n            pairsLength = pairs.length;\n\n        // find total contacts on each body\n        for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive)\n                continue;\n            \n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n        }\n    };\n\n    /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} delta\n     * @param {number} [damping=1]\n     */\n    Resolver.solvePosition = function(pairs, delta, damping) {\n        var i,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            contactShare,\n            positionImpulse,\n            positionDampen = Resolver._positionDampen * (damping || 1),\n            slopDampen = Common.clamp(delta / Common._baseDelta, 0, 1),\n            pairsLength = pairs.length;\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n\n            // get current separation between body edges involved in collision\n            pair.separation = \n                normal.x * (bodyB.positionImpulse.x + collision.penetration.x - bodyA.positionImpulse.x)\n                + normal.y * (bodyB.positionImpulse.y + collision.penetration.y - bodyA.positionImpulse.y);\n        }\n        \n        for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = pair.separation - pair.slop * slopDampen;\n\n            if (bodyA.isStatic || bodyB.isStatic)\n                positionImpulse *= 2;\n            \n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                contactShare = positionDampen / bodyA.totalContacts;\n                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                contactShare = positionDampen / bodyB.totalContacts;\n                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n        }\n    };\n\n    /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */\n    Resolver.postSolvePosition = function(bodies) {\n        var positionWarming = Resolver._positionWarming,\n            bodiesLength = bodies.length,\n            verticesTranslate = Vertices.translate,\n            boundsUpdate = Bounds.update;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            var body = bodies[i],\n                positionImpulse = body.positionImpulse,\n                positionImpulseX = positionImpulse.x,\n                positionImpulseY = positionImpulse.y,\n                velocity = body.velocity;\n\n            // reset contact count\n            body.totalContacts = 0;\n\n            if (positionImpulseX !== 0 || positionImpulseY !== 0) {\n                // update body geometry\n                for (var j = 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n                    verticesTranslate(part.vertices, positionImpulse);\n                    boundsUpdate(part.bounds, part.vertices, velocity);\n                    part.position.x += positionImpulseX;\n                    part.position.y += positionImpulseY;\n                }\n\n                // move the body without changing velocity\n                body.positionPrev.x += positionImpulseX;\n                body.positionPrev.y += positionImpulseY;\n\n                if (positionImpulseX * velocity.x + positionImpulseY * velocity.y < 0) {\n                    // reset cached impulse if the body has velocity along it\n                    positionImpulse.x = 0;\n                    positionImpulse.y = 0;\n                } else {\n                    // warm the next iteration\n                    positionImpulse.x *= positionWarming;\n                    positionImpulse.y *= positionWarming;\n                }\n            }\n        }\n    };\n\n    /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolveVelocity = function(pairs) {\n        var pairsLength = pairs.length,\n            i,\n            j;\n        \n        for (i = 0; i < pairsLength; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var contacts = pair.activeContacts,\n                contactsLength = contacts.length,\n                collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent;\n    \n            // resolve each contact\n            for (j = 0; j < contactsLength; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex,\n                    normalImpulse = contact.normalImpulse,\n                    tangentImpulse = contact.tangentImpulse;\n    \n                if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                    // total impulse from contact\n                    var impulseX = normal.x * normalImpulse + tangent.x * tangentImpulse,\n                        impulseY = normal.y * normalImpulse + tangent.y * tangentImpulse;\n                    \n                    // apply impulse from contact\n                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                        bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\n                        bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\n                        bodyA.anglePrev += bodyA.inverseInertia * (\n                            (contactVertex.x - bodyA.position.x) * impulseY\n                            - (contactVertex.y - bodyA.position.y) * impulseX\n                        );\n                    }\n    \n                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                        bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\n                        bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\n                        bodyB.anglePrev -= bodyB.inverseInertia * (\n                            (contactVertex.x - bodyB.position.x) * impulseY \n                            - (contactVertex.y - bodyB.position.y) * impulseX\n                        );\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} delta\n     */\n    Resolver.solveVelocity = function(pairs, delta) {\n        var timeScale = delta / Common._baseDelta,\n            timeScaleSquared = timeScale * timeScale,\n            timeScaleCubed = timeScaleSquared * timeScale,\n            restingThresh = -Resolver._restingThresh * timeScale,\n            restingThreshTangent = Resolver._restingThreshTangent,\n            frictionNormalMultiplier = Resolver._frictionNormalMultiplier * timeScale,\n            frictionMaxStatic = Resolver._frictionMaxStatic,\n            pairsLength = pairs.length,\n            tangentImpulse,\n            maxFriction,\n            i,\n            j;\n\n        for (i = 0; i < pairsLength; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                bodyAVelocity = bodyA.velocity,\n                bodyBVelocity = bodyB.velocity,\n                normalX = collision.normal.x,\n                normalY = collision.normal.y,\n                tangentX = collision.tangent.x,\n                tangentY = collision.tangent.y,\n                contacts = pair.activeContacts,\n                contactsLength = contacts.length,\n                contactShare = 1 / contactsLength,\n                inverseMassTotal = bodyA.inverseMass + bodyB.inverseMass,\n                friction = pair.friction * pair.frictionStatic * frictionNormalMultiplier;\n\n            // update body velocities\n            bodyAVelocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyAVelocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyBVelocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyBVelocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // resolve each contact\n            for (j = 0; j < contactsLength; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex;\n\n                var offsetAX = contactVertex.x - bodyA.position.x,\n                    offsetAY = contactVertex.y - bodyA.position.y,\n                    offsetBX = contactVertex.x - bodyB.position.x,\n                    offsetBY = contactVertex.y - bodyB.position.y;\n \n                var velocityPointAX = bodyAVelocity.x - offsetAY * bodyA.angularVelocity,\n                    velocityPointAY = bodyAVelocity.y + offsetAX * bodyA.angularVelocity,\n                    velocityPointBX = bodyBVelocity.x - offsetBY * bodyB.angularVelocity,\n                    velocityPointBY = bodyBVelocity.y + offsetBX * bodyB.angularVelocity;\n\n                var relativeVelocityX = velocityPointAX - velocityPointBX,\n                    relativeVelocityY = velocityPointAY - velocityPointBY;\n\n                var normalVelocity = normalX * relativeVelocityX + normalY * relativeVelocityY,\n                    tangentVelocity = tangentX * relativeVelocityX + tangentY * relativeVelocityY;\n\n                // coulomb friction\n                var normalOverlap = pair.separation + normalVelocity;\n                var normalForce = Math.min(normalOverlap, 1);\n                normalForce = normalOverlap < 0 ? 0 : normalForce;\n\n                var frictionLimit = normalForce * friction;\n\n                if (tangentVelocity < -frictionLimit || tangentVelocity > frictionLimit) {\n                    maxFriction = (tangentVelocity > 0 ? tangentVelocity : -tangentVelocity);\n                    tangentImpulse = pair.friction * (tangentVelocity > 0 ? 1 : -1) * timeScaleCubed;\n                    \n                    if (tangentImpulse < -maxFriction) {\n                        tangentImpulse = -maxFriction;\n                    } else if (tangentImpulse > maxFriction) {\n                        tangentImpulse = maxFriction;\n                    }\n                } else {\n                    tangentImpulse = tangentVelocity;\n                    maxFriction = frictionMaxStatic;\n                }\n\n                // account for mass, inertia and contact offset\n                var oAcN = offsetAX * normalY - offsetAY * normalX,\n                    oBcN = offsetBX * normalY - offsetBY * normalX,\n                    share = contactShare / (inverseMassTotal + bodyA.inverseInertia * oAcN * oAcN + bodyB.inverseInertia * oBcN * oBcN);\n\n                // raw impulses\n                var normalImpulse = (1 + pair.restitution) * normalVelocity * share;\n                tangentImpulse *= share;\n\n                // handle high velocity and resting collisions separately\n                if (normalVelocity < restingThresh) {\n                    // high normal velocity so clear cached contact normal impulse\n                    contact.normalImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // impulse constraint tends to 0\n                    var contactNormalImpulse = contact.normalImpulse;\n                    contact.normalImpulse += normalImpulse;\n                    if (contact.normalImpulse > 0) contact.normalImpulse = 0;\n                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                }\n\n                // handle high velocity and resting collisions separately\n                if (tangentVelocity < -restingThreshTangent || tangentVelocity > restingThreshTangent) {\n                    // high tangent velocity so clear cached contact tangent impulse\n                    contact.tangentImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                    var contactTangentImpulse = contact.tangentImpulse;\n                    contact.tangentImpulse += tangentImpulse;\n                    if (contact.tangentImpulse < -maxFriction) contact.tangentImpulse = -maxFriction;\n                    if (contact.tangentImpulse > maxFriction) contact.tangentImpulse = maxFriction;\n                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                }\n\n                // total impulse from contact\n                var impulseX = normalX * normalImpulse + tangentX * tangentImpulse,\n                    impulseY = normalY * normalImpulse + tangentY * tangentImpulse;\n                \n                // apply impulse from contact\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                    bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\n                    bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\n                    bodyA.anglePrev += (offsetAX * impulseY - offsetAY * impulseX) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                    bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\n                    bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\n                    bodyB.anglePrev -= (offsetBX * impulseY - offsetBY * impulseX) * bodyB.inverseInertia;\n                }\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/\n\nvar Pairs = {};\n\nmodule.exports = Pairs;\n\nvar Pair = __webpack_require__(9);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */\n    Pairs.create = function(options) {\n        return Common.extend({ \n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n        }, options);\n    };\n\n    /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */\n    Pairs.update = function(pairs, collisions, timestamp) {\n        var pairsList = pairs.list,\n            pairsListLength = pairsList.length,\n            pairsTable = pairs.table,\n            collisionsLength = collisions.length,\n            collisionStart = pairs.collisionStart,\n            collisionEnd = pairs.collisionEnd,\n            collisionActive = pairs.collisionActive,\n            collision,\n            pairIndex,\n            pair,\n            i;\n\n        // clear collision state arrays, but maintain old reference\n        collisionStart.length = 0;\n        collisionEnd.length = 0;\n        collisionActive.length = 0;\n\n        for (i = 0; i < pairsListLength; i++) {\n            pairsList[i].confirmedActive = false;\n        }\n\n        for (i = 0; i < collisionsLength; i++) {\n            collision = collisions[i];\n            pair = collision.pair;\n\n            if (pair) {\n                // pair already exists (but may or may not be active)\n                if (pair.isActive) {\n                    // pair exists and is active\n                    collisionActive.push(pair);\n                } else {\n                    // pair exists but was inactive, so a collision has just started again\n                    collisionStart.push(pair);\n                }\n\n                // update the pair\n                Pair.update(pair, collision, timestamp);\n                pair.confirmedActive = true;\n            } else {\n                // pair did not exist, create a new pair\n                pair = Pair.create(collision, timestamp);\n                pairsTable[pair.id] = pair;\n\n                // push the new pair\n                collisionStart.push(pair);\n                pairsList.push(pair);\n            }\n        }\n\n        // find pairs that are no longer active\n        var removePairIndex = [];\n        pairsListLength = pairsList.length;\n\n        for (i = 0; i < pairsListLength; i++) {\n            pair = pairsList[i];\n            \n            if (!pair.confirmedActive) {\n                Pair.setActive(pair, false, timestamp);\n                collisionEnd.push(pair);\n\n                if (!pair.collision.bodyA.isSleeping && !pair.collision.bodyB.isSleeping) {\n                    removePairIndex.push(i);\n                }\n            }\n        }\n\n        // remove inactive pairs\n        for (i = 0; i < removePairIndex.length; i++) {\n            pairIndex = removePairIndex[i] - i;\n            pair = pairsList[pairIndex];\n            pairsList.splice(pairIndex, 1);\n            delete pairsTable[pair.id];\n        }\n    };\n\n    /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */\n    Pairs.clear = function(pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n    };\n\n})();\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Matter = module.exports = __webpack_require__(21);\r\n\r\nMatter.Axes = __webpack_require__(11);\r\nMatter.Bodies = __webpack_require__(12);\r\nMatter.Body = __webpack_require__(4);\r\nMatter.Bounds = __webpack_require__(1);\r\nMatter.Collision = __webpack_require__(8);\r\nMatter.Common = __webpack_require__(0);\r\nMatter.Composite = __webpack_require__(6);\r\nMatter.Composites = __webpack_require__(22);\r\nMatter.Constraint = __webpack_require__(10);\r\nMatter.Contact = __webpack_require__(16);\r\nMatter.Detector = __webpack_require__(13);\r\nMatter.Engine = __webpack_require__(17);\r\nMatter.Events = __webpack_require__(5);\r\nMatter.Grid = __webpack_require__(23);\r\nMatter.Mouse = __webpack_require__(14);\r\nMatter.MouseConstraint = __webpack_require__(24);\r\nMatter.Pair = __webpack_require__(9);\r\nMatter.Pairs = __webpack_require__(19);\r\nMatter.Plugin = __webpack_require__(15);\r\nMatter.Query = __webpack_require__(25);\r\nMatter.Render = __webpack_require__(26);\r\nMatter.Resolver = __webpack_require__(18);\r\nMatter.Runner = __webpack_require__(27);\r\nMatter.SAT = __webpack_require__(28);\r\nMatter.Sleeping = __webpack_require__(7);\r\nMatter.Svg = __webpack_require__(29);\r\nMatter.Vector = __webpack_require__(2);\r\nMatter.Vertices = __webpack_require__(3);\r\nMatter.World = __webpack_require__(30);\r\n\r\n// temporary back compatibility\r\nMatter.Engine.run = Matter.Runner.run;\r\nMatter.Common.deprecated(Matter.Engine, 'run', 'Engine.run \u27A4 use Matter.Runner.run(engine) instead');\r\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\r\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\r\n*\r\n* @class Matter\r\n*/\r\n\r\nvar Matter = {};\r\n\r\nmodule.exports = Matter;\r\n\r\nvar Plugin = __webpack_require__(15);\r\nvar Common = __webpack_require__(0);\r\n\r\n(function() {\r\n\r\n    /**\r\n     * The library name.\r\n     * @property name\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.name = 'matter-js';\r\n\r\n    /**\r\n     * The library version.\r\n     * @property version\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.version =  true ? \"0.19.0\" : undefined;\r\n\r\n    /**\r\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\r\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\r\n     * @property uses\r\n     * @type {Array}\r\n     */\r\n    Matter.uses = [];\r\n\r\n    /**\r\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\r\n     * @property used\r\n     * @readOnly\r\n     * @type {Array}\r\n     */\r\n    Matter.used = [];\r\n\r\n    /**\r\n     * Installs the given plugins on the `Matter` namespace.\r\n     * This is a short-hand for `Plugin.use`, see it for more information.\r\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\r\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\r\n     * @method use\r\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\r\n     */\r\n    Matter.use = function() {\r\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method before\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain before the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.before = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathBefore(Matter, path, func);\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method after\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain after the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.after = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathAfter(Matter, path, func);\r\n    };\r\n\r\n})();\r\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/\n\nvar Composites = {};\n\nmodule.exports = Composites;\n\nvar Composite = __webpack_require__(6);\nvar Constraint = __webpack_require__(10);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(4);\nvar Bodies = __webpack_require__(12);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({ label: 'Stack' }),\n            x = xx,\n            y = yy,\n            lastBody,\n            i = 0;\n\n        for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n            \n            for (var column = 0; column < columns; column++) {\n                var body = callback(x, y, column, row, lastBody, i);\n                    \n                if (body) {\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x; \n\n                    if (bodyHeight > maxHeight)\n                        maxHeight = bodyHeight;\n                    \n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\n\n                    x = body.bounds.max.x + columnGap;\n\n                    Composite.addBody(stack, body);\n                    \n                    lastBody = body;\n                    i += 1;\n                } else {\n                    x += columnGap;\n                }\n            }\n            \n            y += maxHeight + rowGap;\n            x = xx;\n        }\n\n        return stack;\n    };\n    \n    /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n        \n        for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, \n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n        \n            var defaults = {\n                bodyA: bodyA,\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\n                bodyB: bodyB,\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\n            };\n            \n            var constraint = Common.extend(defaults, options);\n        \n            Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n\n        composite.label += ' Chain';\n        \n        return composite;\n    };\n\n    /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n            row,\n            col,\n            bodyA,\n            bodyB,\n            bodyC;\n        \n        for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n                bodyA = bodies[(col - 1) + (row * columns)];\n                bodyB = bodies[col + (row * columns)];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n            }\n\n            if (row > 0) {\n                for (col = 0; col < columns; col++) {\n                    bodyA = bodies[col + ((row - 1) * columns)];\n                    bodyB = bodies[col + (row * columns)];\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\n                    if (crossBrace && col > 0) {\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n\n                    if (crossBrace && col < columns - 1) {\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n                }\n            }\n        }\n\n        composite.label += ' Mesh';\n        \n        return composite;\n    };\n    \n    /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            \n            if (row > actualRows)\n                return;\n            \n            // reverse row order\n            row = actualRows - row;\n            \n            var start = row,\n                end = columns - 1 - row;\n\n            if (column < start || column > end)\n                return;\n            \n            // retroactively fix the first body's position, since width was unknown\n            if (i === 1) {\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            \n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n        });\n    };\n\n    /**\n     * This has now moved to the [newtonsCradle example](https://github.com/liabru/matter-js/blob/master/examples/newtonsCradle.js), follow that instead as this function is deprecated here.\n     * @deprecated moved to newtonsCradle example\n     * @method newtonsCradle\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */\n    Composites.newtonsCradle = function(xx, yy, number, size, length) {\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\n\n        for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, \n                    { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\n                constraint = Constraint.create({ pointA: { x: xx + i * (size * separation), y: yy }, bodyB: circle });\n\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n        }\n\n        return newtonsCradle;\n    };\n\n    deprecated(Composites, 'newtonsCradle', 'Composites.newtonsCradle \u27A4 moved to newtonsCradle example');\n    \n    /**\n     * This has now moved to the [car example](https://github.com/liabru/matter-js/blob/master/examples/car.js), follow that instead as this function is deprecated here.\n     * @deprecated moved to car example\n     * @method car\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */\n    Composites.car = function(xx, yy, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n            wheelBase = 20,\n            wheelAOffset = -width * 0.5 + wheelBase,\n            wheelBOffset = width * 0.5 - wheelBase,\n            wheelYOffset = 0;\n    \n        var car = Composite.create({ label: 'Car' }),\n            body = Bodies.rectangle(xx, yy, width, height, { \n                collisionFilter: {\n                    group: group\n                },\n                chamfer: {\n                    radius: height * 0.5\n                },\n                density: 0.0002\n            });\n    \n        var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var axelA = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelAOffset, y: wheelYOffset },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n        });\n                        \n        var axelB = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelBOffset, y: wheelYOffset },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n        });\n        \n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n\n        return car;\n    };\n\n    deprecated(Composites, 'car', 'Composites.car \u27A4 moved to car example');\n\n    /**\n     * This has now moved to the [softBody example](https://github.com/liabru/matter-js/blob/master/examples/softBody.js)\n     * and the [cloth example](https://github.com/liabru/matter-js/blob/master/examples/cloth.js), follow those instead as this function is deprecated here.\n     * @deprecated moved to softBody and cloth examples\n     * @method softBody\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */\n    Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\n        constraintOptions = Common.extend({ stiffness: 0.2, render: { type: 'line', anchors: false } }, constraintOptions);\n\n        var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n        });\n\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n\n        softBody.label = 'Soft Body';\n\n        return softBody;\n    };\n\n    deprecated(Composites, 'softBody', 'Composites.softBody \u27A4 moved to softBody and cloth examples');\n})();\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* This module has now been replaced by `Matter.Detector`.\n*\n* All usage should be migrated to `Matter.Detector` or another alternative.\n* For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\n*\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n* @deprecated\n*/\n\nvar Grid = {};\n\nmodule.exports = Grid;\n\nvar Pair = __webpack_require__(9);\nvar Common = __webpack_require__(0);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Creates a new grid.\n     * @deprecated replaced by Matter.Detector\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */\n    Grid.create = function(options) {\n        var defaults = {\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * Updates the grid.\n     * @deprecated replaced by Matter.Detector\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\n        var i, col, row,\n            world = engine.world,\n            buckets = grid.buckets,\n            bucket,\n            bucketId,\n            gridChanged = false;\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isSleeping && !forceUpdate)\n                continue;\n\n            // temporary back compatibility bounds check\n            if (world.bounds && (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y))\n                continue;\n\n            var newRegion = Grid._getRegion(grid, body);\n\n            // if the body has changed grid region\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n\n                if (!body.region || forceUpdate)\n                    body.region = newRegion;\n\n                var union = Grid._regionUnion(newRegion, body.region);\n\n                // update grid buckets affected by region change\n                // iterate over the union of both regions\n                for (col = union.startCol; col <= union.endCol; col++) {\n                    for (row = union.startRow; row <= union.endRow; row++) {\n                        bucketId = Grid._getBucketId(col, row);\n                        bucket = buckets[bucketId];\n\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\n\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\n                                                && row >= body.region.startRow && row <= body.region.endRow);\n\n                        // remove from old region buckets\n                        if (!isInsideNewRegion && isInsideOldRegion) {\n                            if (isInsideOldRegion) {\n                                if (bucket)\n                                    Grid._bucketRemoveBody(grid, bucket, body);\n                            }\n                        }\n\n                        // add to new region buckets\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\n                            if (!bucket)\n                                bucket = Grid._createBucket(buckets, bucketId);\n                            Grid._bucketAddBody(grid, bucket, body);\n                        }\n                    }\n                }\n\n                // set the new region\n                body.region = newRegion;\n\n                // flag changes so we can update pairs\n                gridChanged = true;\n            }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged)\n            grid.pairsList = Grid._createActivePairsList(grid);\n    };\n\n    deprecated(Grid, 'update', 'Grid.update \u27A4 replaced by Matter.Detector');\n\n    /**\n     * Clears the grid.\n     * @deprecated replaced by Matter.Detector\n     * @method clear\n     * @param {grid} grid\n     */\n    Grid.clear = function(grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n    };\n\n    deprecated(Grid, 'clear', 'Grid.clear \u27A4 replaced by Matter.Detector');\n\n    /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */\n    Grid._regionUnion = function(regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n            endCol = Math.max(regionA.endCol, regionB.endCol),\n            startRow = Math.min(regionA.startRow, regionB.startRow),\n            endRow = Math.max(regionA.endRow, regionB.endRow);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */\n    Grid._getRegion = function(grid, body) {\n        var bounds = body.bounds,\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Creates a region.\n     * @method _createRegion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */\n    Grid._createRegion = function(startCol, endCol, startRow, endRow) {\n        return { \n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol, \n            endCol: endCol, \n            startRow: startRow, \n            endRow: endRow \n        };\n    };\n\n    /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */\n    Grid._getBucketId = function(column, row) {\n        return 'C' + column + 'R' + row;\n    };\n\n    /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */\n    Grid._createBucket = function(buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n    };\n\n    /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketAddBody = function(grid, bucket, body) {\n        var gridPairs = grid.pairs,\n            pairId = Pair.id,\n            bucketLength = bucket.length,\n            i;\n\n        // add new pairs\n        for (i = 0; i < bucketLength; i++) {\n            var bodyB = bucket[i];\n\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\n                continue;\n\n            // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n            var id = pairId(body, bodyB),\n                pair = gridPairs[id];\n\n            if (pair) {\n                pair[2] += 1;\n            } else {\n                gridPairs[id] = [body, bodyB, 1];\n            }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n    };\n\n    /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketRemoveBody = function(grid, bucket, body) {\n        var gridPairs = grid.pairs,\n            pairId = Pair.id,\n            i;\n\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n\n        var bucketLength = bucket.length;\n\n        // update pair counts\n        for (i = 0; i < bucketLength; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var pair = gridPairs[pairId(body, bucket[i])];\n\n            if (pair)\n                pair[2] -= 1;\n        }\n    };\n\n    /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */\n    Grid._createActivePairsList = function(grid) {\n        var pair,\n            gridPairs = grid.pairs,\n            pairKeys = Common.keys(gridPairs),\n            pairKeysLength = pairKeys.length,\n            pairs = [],\n            k;\n\n        // iterate over grid.pairs\n        for (k = 0; k < pairKeysLength; k++) {\n            pair = gridPairs[pairKeys[k]];\n\n            // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n            if (pair[2] > 0) {\n                pairs.push(pair);\n            } else {\n                delete gridPairs[pairKeys[k]];\n            }\n        }\n\n        return pairs;\n    };\n    \n})();\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/\n\nvar MouseConstraint = {};\n\nmodule.exports = MouseConstraint;\n\nvar Vertices = __webpack_require__(3);\nvar Sleeping = __webpack_require__(7);\nvar Mouse = __webpack_require__(14);\nvar Events = __webpack_require__(5);\nvar Detector = __webpack_require__(13);\nvar Constraint = __webpack_require__(10);\nvar Composite = __webpack_require__(6);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\n\n(function() {\n\n    /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */\n    MouseConstraint.create = function(engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n        if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n                mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n                mouse = Mouse.create(options.element);\n            } else {\n                mouse = Mouse.create();\n                Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n        }\n\n        var constraint = Constraint.create({ \n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: { x: 0, y: 0 },\n            length: 0.01, \n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n                strokeStyle: '#90EE90',\n                lineWidth: 3\n            }\n        });\n\n        var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            }\n        };\n\n        var mouseConstraint = Common.extend(defaults, options);\n\n        Events.on(engine, 'beforeUpdate', function() {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n            MouseConstraint._triggerEvents(mouseConstraint);\n        });\n\n        return mouseConstraint;\n    };\n\n    /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */\n    MouseConstraint.update = function(mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n            constraint = mouseConstraint.constraint,\n            body = mouseConstraint.body;\n\n        if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n                for (var i = 0; i < bodies.length; i++) {\n                    body = bodies[i];\n                    if (Bounds.contains(body.bounds, mouse.position) \n                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                            var part = body.parts[j];\n                            if (Vertices.contains(part.vertices, mouse.position)) {\n                                constraint.pointA = mouse.position;\n                                constraint.bodyB = mouseConstraint.body = body;\n                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\n                                constraint.angleB = body.angle;\n\n                                Sleeping.set(body, false);\n                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            } else {\n                Sleeping.set(constraint.bodyB, false);\n                constraint.pointA = mouse.position;\n            }\n        } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n\n            if (body)\n                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\n        }\n    };\n\n    /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */\n    MouseConstraint._triggerEvents = function(mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n            mouseEvents = mouse.sourceEvents;\n\n        if (mouseEvents.mousemove)\n            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\n\n        if (mouseEvents.mousedown)\n            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\n\n        if (mouseEvents.mouseup)\n            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */\n\n    /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */\n\n    /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n})();\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/\n\nvar Query = {};\n\nmodule.exports = Query;\n\nvar Vector = __webpack_require__(2);\nvar Collision = __webpack_require__(8);\nvar Bounds = __webpack_require__(1);\nvar Bodies = __webpack_require__(12);\nvar Vertices = __webpack_require__(3);\n\n(function() {\n\n    /**\n     * Returns a list of collisions between `body` and `bodies`.\n     * @method collides\n     * @param {body} body\n     * @param {body[]} bodies\n     * @return {collision[]} Collisions\n     */\n    Query.collides = function(body, bodies) {\n        var collisions = [],\n            bodiesLength = bodies.length,\n            bounds = body.bounds,\n            collides = Collision.collides,\n            overlaps = Bounds.overlaps;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            var bodyA = bodies[i],\n                partsALength = bodyA.parts.length,\n                partsAStart = partsALength === 1 ? 0 : 1;\n            \n            if (overlaps(bodyA.bounds, bounds)) {\n                for (var j = partsAStart; j < partsALength; j++) {\n                    var part = bodyA.parts[j];\n\n                    if (overlaps(part.bounds, bounds)) {\n                        var collision = collides(part, body);\n\n                        if (collision) {\n                            collisions.push(collision);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {collision[]} Collisions\n     */\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n\n        var rayAngle = Vector.angle(startPoint, endPoint),\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n            rayX = (endPoint.x + startPoint.x) * 0.5,\n            rayY = (endPoint.y + startPoint.y) * 0.5,\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\n            collisions = Query.collides(ray, bodies);\n\n        for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;            \n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */\n    Query.region = function(bodies, bounds, outside) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if ((overlaps && !outside) || (!overlaps && outside))\n                result.push(body);\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */\n    Query.point = function(bodies, point) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            \n            if (Bounds.contains(body.bounds, point)) {\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Bounds.contains(part.bounds, point)\n                        && Vertices.contains(part.vertices, point)) {\n                        result.push(body);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n})();\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Render` module is a simple canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/\n\nvar Render = {};\n\nmodule.exports = Render;\n\nvar Body = __webpack_require__(4);\nvar Common = __webpack_require__(0);\nvar Composite = __webpack_require__(6);\nvar Bounds = __webpack_require__(1);\nvar Events = __webpack_require__(5);\nvar Vector = __webpack_require__(2);\nvar Mouse = __webpack_require__(14);\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    Render._goodFps = 30;\n    Render._goodDelta = 1000 / 60;\n\n    /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */\n    Render.create = function(options) {\n        var defaults = {\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            timing: {\n                historySize: 60,\n                delta: 0,\n                deltaHistory: [],\n                lastTime: 0,\n                lastTimestamp: 0,\n                lastElapsed: 0,\n                timestampElapsed: 0,\n                timestampElapsedHistory: [],\n                engineDeltaHistory: [],\n                engineElapsedHistory: [],\n                elapsedHistory: []\n            },\n            options: {\n                width: 800,\n                height: 600,\n                pixelRatio: 1,\n                background: '#14151f',\n                wireframeBackground: '#14151f',\n                hasBounds: !!options.bounds,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showStats: false,\n                showPerformance: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showSeparations: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showVertexNumbers: false,\n                showConvexHulls: false,\n                showInternalEdges: false,\n                showMousePosition: false\n            }\n        };\n\n        var render = Common.extend(defaults, options);\n\n        if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n        }\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n\n        render.bounds = render.bounds || {\n            min: {\n                x: 0,\n                y: 0\n            },\n            max: {\n                x: render.canvas.width,\n                y: render.canvas.height\n            }\n        };\n\n        // for temporary back compatibility only\n        render.controller = Render;\n        render.options.showBroadphase = false;\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        }\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */\n    Render.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            \n            _updateTiming(render, time);\n\n            Render.world(render, time);\n\n            if (render.options.showStats || render.options.showDebug) {\n                Render.stats(render, render.context, time);\n            }\n\n            if (render.options.showPerformance || render.options.showDebug) {\n                Render.performance(render, render.context, time);\n            }\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */\n    Render.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */\n    Render.setPixelRatio = function(render, pixelRatio) {\n        var options = render.options,\n            canvas = render.canvas;\n\n        if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n        }\n\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n    };\n\n    /**\n     * Positions and sizes the viewport around the given object bounds.\n     * Objects must have at least one of the following properties:\n     * - `object.bounds`\n     * - `object.position`\n     * - `object.min` and `object.max`\n     * - `object.x` and `object.y`\n     * @method lookAt\n     * @param {render} render\n     * @param {object[]} objects\n     * @param {vector} [padding]\n     * @param {bool} [center=true]\n     */\n    Render.lookAt = function(render, objects, padding, center) {\n        center = typeof center !== 'undefined' ? center : true;\n        objects = Common.isArray(objects) ? objects : [objects];\n        padding = padding || {\n            x: 0,\n            y: 0\n        };\n\n        // find bounds of all objects\n        var bounds = {\n            min: { x: Infinity, y: Infinity },\n            max: { x: -Infinity, y: -Infinity }\n        };\n\n        for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : (object.min || object.position || object),\n                max = object.bounds ? object.bounds.max : (object.max || object.position || object);\n\n            if (min && max) {\n                if (min.x < bounds.min.x)\n                    bounds.min.x = min.x;\n\n                if (max.x > bounds.max.x)\n                    bounds.max.x = max.x;\n\n                if (min.y < bounds.min.y)\n                    bounds.min.y = min.y;\n\n                if (max.y > bounds.max.y)\n                    bounds.max.y = max.y;\n            }\n        }\n\n        // find ratios\n        var width = (bounds.max.x - bounds.min.x) + 2 * padding.x,\n            height = (bounds.max.y - bounds.min.y) + 2 * padding.y,\n            viewHeight = render.canvas.height,\n            viewWidth = render.canvas.width,\n            outerRatio = viewWidth / viewHeight,\n            innerRatio = width / height,\n            scaleX = 1,\n            scaleY = 1;\n\n        // find scale factor\n        if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n        } else {\n            scaleX = outerRatio / innerRatio;\n        }\n\n        // enable bounds\n        render.options.hasBounds = true;\n\n        // position and size\n        render.bounds.min.x = bounds.min.x;\n        render.bounds.max.x = bounds.min.x + width * scaleX;\n        render.bounds.min.y = bounds.min.y;\n        render.bounds.max.y = bounds.min.y + height * scaleY;\n\n        // center\n        if (center) {\n            render.bounds.min.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.max.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.min.y += height * 0.5 - (height * scaleY) * 0.5;\n            render.bounds.max.y += height * 0.5 - (height * scaleY) * 0.5;\n        }\n\n        // padding\n        render.bounds.min.x -= padding.x;\n        render.bounds.max.x -= padding.x;\n        render.bounds.min.y -= padding.y;\n        render.bounds.max.y -= padding.y;\n\n        // update mouse\n        if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n\n            Mouse.setOffset(render.mouse, render.bounds.min);\n        }\n    };\n\n    /**\n     * Applies viewport transforms based on `render.bounds` to a render context.\n     * @method startViewTransform\n     * @param {render} render\n     */\n    Render.startViewTransform = function(render) {\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        render.context.setTransform(\n            render.options.pixelRatio / boundsScaleX, 0, 0, \n            render.options.pixelRatio / boundsScaleY, 0, 0\n        );\n        \n        render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n    };\n\n    /**\n     * Resets all transforms on the render context.\n     * @method endViewTransform\n     * @param {render} render\n     */\n    Render.endViewTransform = function(render) {\n        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n    };\n\n    /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */\n    Render.world = function(render, time) {\n        var startTime = Common.now(),\n            engine = render.engine,\n            world = engine.world,\n            canvas = render.canvas,\n            context = render.context,\n            options = render.options,\n            timing = render.timing;\n\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            background = options.wireframes ? options.wireframeBackground : options.background,\n            bodies = [],\n            constraints = [],\n            i;\n\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background)\n            _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n                var body = allBodies[i];\n                if (Bounds.overlaps(body.bounds, render.bounds))\n                    bodies.push(body);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            Render.startViewTransform(render);\n\n            // update mouse\n            if (render.mouse) {\n                Mouse.setScale(render.mouse, {\n                    x: (render.bounds.max.x - render.bounds.min.x) / render.options.width,\n                    y: (render.bounds.max.y - render.bounds.min.y) / render.options.height\n                });\n\n                Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n        } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n\n            if (render.options.pixelRatio !== 1) {\n                render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n            }\n        }\n\n        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n        } else {\n            if (options.showConvexHulls)\n                Render.bodyConvexHulls(render, bodies, context);\n\n            // optimised method for wireframes only\n            Render.bodyWireframes(render, bodies, context);\n        }\n\n        if (options.showBounds)\n            Render.bodyBounds(render, bodies, context);\n\n        if (options.showAxes || options.showAngleIndicator)\n            Render.bodyAxes(render, bodies, context);\n\n        if (options.showPositions)\n            Render.bodyPositions(render, bodies, context);\n\n        if (options.showVelocity)\n            Render.bodyVelocity(render, bodies, context);\n\n        if (options.showIds)\n            Render.bodyIds(render, bodies, context);\n\n        if (options.showSeparations)\n            Render.separations(render, engine.pairs.list, context);\n\n        if (options.showCollisions)\n            Render.collisions(render, engine.pairs.list, context);\n\n        if (options.showVertexNumbers)\n            Render.vertexNumbers(render, bodies, context);\n\n        if (options.showMousePosition)\n            Render.mousePosition(render, render.mouse, context);\n\n        Render.constraints(constraints, context);\n\n        if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n        }\n\n        Events.trigger(render, 'afterRender', event);\n\n        // log the time elapsed computing this update\n        timing.lastElapsed = Common.now() - startTime;\n    };\n\n    /**\n     * Renders statistics about the engine and world useful for debugging.\n     * @private\n     * @method stats\n     * @param {render} render\n     * @param {RenderingContext} context\n     * @param {Number} time\n     */\n    Render.stats = function(render, context, time) {\n        var engine = render.engine,\n            world = engine.world,\n            bodies = Composite.allBodies(world),\n            parts = 0,\n            width = 55,\n            height = 44,\n            x = 0,\n            y = 0;\n        \n        // count parts\n        for (var i = 0; i < bodies.length; i += 1) {\n            parts += bodies[i].parts.length;\n        }\n\n        // sections\n        var sections = {\n            'Part': parts,\n            'Body': bodies.length,\n            'Cons': Composite.allConstraints(world).length,\n            'Comp': Composite.allComposites(world).length,\n            'Pair': engine.pairs.list.length\n        };\n\n        // background\n        context.fillStyle = '#0e0f19';\n        context.fillRect(x, y, width * 5.5, height);\n\n        context.font = '12px Arial';\n        context.textBaseline = 'top';\n        context.textAlign = 'right';\n\n        // sections\n        for (var key in sections) {\n            var section = sections[key];\n            // label\n            context.fillStyle = '#aaa';\n            context.fillText(key, x + width, y + 8);\n\n            // value\n            context.fillStyle = '#eee';\n            context.fillText(section, x + width, y + 26);\n\n            x += width;\n        }\n    };\n\n    /**\n     * Renders engine and render performance information.\n     * @private\n     * @method performance\n     * @param {render} render\n     * @param {RenderingContext} context\n     */\n    Render.performance = function(render, context) {\n        var engine = render.engine,\n            timing = render.timing,\n            deltaHistory = timing.deltaHistory,\n            elapsedHistory = timing.elapsedHistory,\n            timestampElapsedHistory = timing.timestampElapsedHistory,\n            engineDeltaHistory = timing.engineDeltaHistory,\n            engineElapsedHistory = timing.engineElapsedHistory,\n            lastEngineDelta = engine.timing.lastDelta;\n        \n        var deltaMean = _mean(deltaHistory),\n            elapsedMean = _mean(elapsedHistory),\n            engineDeltaMean = _mean(engineDeltaHistory),\n            engineElapsedMean = _mean(engineElapsedHistory),\n            timestampElapsedMean = _mean(timestampElapsedHistory),\n            rateMean = (timestampElapsedMean / deltaMean) || 0,\n            fps = (1000 / deltaMean) || 0;\n\n        var graphHeight = 4,\n            gap = 12,\n            width = 60,\n            height = 34,\n            x = 10,\n            y = 69;\n\n        // background\n        context.fillStyle = '#0e0f19';\n        context.fillRect(0, 50, gap * 4 + width * 5 + 22, height);\n\n        // show FPS\n        Render.status(\n            context, x, y, width, graphHeight, deltaHistory.length, \n            Math.round(fps) + ' fps', \n            fps / Render._goodFps,\n            function(i) { return (deltaHistory[i] / deltaMean) - 1; }\n        );\n\n        // show engine delta\n        Render.status(\n            context, x + gap + width, y, width, graphHeight, engineDeltaHistory.length,\n            lastEngineDelta.toFixed(2) + ' dt', \n            Render._goodDelta / lastEngineDelta,\n            function(i) { return (engineDeltaHistory[i] / engineDeltaMean) - 1; }\n        );\n\n        // show engine update time\n        Render.status(\n            context, x + (gap + width) * 2, y, width, graphHeight, engineElapsedHistory.length,\n            engineElapsedMean.toFixed(2) + ' ut', \n            1 - (engineElapsedMean / Render._goodFps),\n            function(i) { return (engineElapsedHistory[i] / engineElapsedMean) - 1; }\n        );\n\n        // show render time\n        Render.status(\n            context, x + (gap + width) * 3, y, width, graphHeight, elapsedHistory.length,\n            elapsedMean.toFixed(2) + ' rt', \n            1 - (elapsedMean / Render._goodFps),\n            function(i) { return (elapsedHistory[i] / elapsedMean) - 1; }\n        );\n\n        // show effective speed\n        Render.status(\n            context, x + (gap + width) * 4, y, width, graphHeight, timestampElapsedHistory.length, \n            rateMean.toFixed(2) + ' x', \n            rateMean * rateMean * rateMean,\n            function(i) { return (((timestampElapsedHistory[i] / deltaHistory[i]) / rateMean) || 0) - 1; }\n        );\n    };\n\n    /**\n     * Renders a label, indicator and a chart.\n     * @private\n     * @method status\n     * @param {RenderingContext} context\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} count\n     * @param {string} label\n     * @param {string} indicator\n     * @param {function} plotY\n     */\n    Render.status = function(context, x, y, width, height, count, label, indicator, plotY) {\n        // background\n        context.strokeStyle = '#888';\n        context.fillStyle = '#444';\n        context.lineWidth = 1;\n        context.fillRect(x, y + 7, width, 1);\n\n        // chart\n        context.beginPath();\n        context.moveTo(x, y + 7 - height * Common.clamp(0.4 * plotY(0), -2, 2));\n        for (var i = 0; i < width; i += 1) {\n            context.lineTo(x + i, y + 7 - (i < count ? height * Common.clamp(0.4 * plotY(i), -2, 2) : 0));\n        }\n        context.stroke();\n\n        // indicator\n        context.fillStyle = 'hsl(' + Common.clamp(25 + 95 * indicator, 0, 120) + ',100%,60%)';\n        context.fillRect(x, y - 7, 4, 4);\n\n        // label\n        context.font = '12px Arial';\n        context.textBaseline = 'middle';\n        context.textAlign = 'right';\n        context.fillStyle = '#eee';\n        context.fillText(label, x + width, y - 5);\n    };\n\n    /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */\n    Render.constraints = function(constraints, context) {\n        var c = context;\n\n        for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\n                continue;\n\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n                start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n                start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                if (bodyB) {\n                    end = Vector.add(bodyB.position, constraint.pointB);\n                } else {\n                    end = constraint.pointB;\n                }\n\n                c.beginPath();\n                c.moveTo(start.x, start.y);\n\n                if (constraint.render.type === 'spring') {\n                    var delta = Vector.sub(end, start),\n                        normal = Vector.perp(Vector.normalise(delta)),\n                        coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                        offset;\n\n                    for (var j = 1; j < coils; j += 1) {\n                        offset = j % 2 === 0 ? 1 : -1;\n\n                        c.lineTo(\n                            start.x + delta.x * (j / coils) + normal.x * offset * 4,\n                            start.y + delta.y * (j / coils) + normal.y * offset * 4\n                        );\n                    }\n                }\n\n                c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n                c.lineWidth = constraint.render.lineWidth;\n                c.strokeStyle = constraint.render.strokeStyle;\n                c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n                c.fillStyle = constraint.render.strokeStyle;\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n                c.fill();\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodies = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\n            body,\n            part,\n            i,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                if (!part.render.visible)\n                    continue;\n\n                if (options.showSleeping && body.isSleeping) {\n                    c.globalAlpha = 0.5 * part.render.opacity;\n                } else if (part.render.opacity !== 1) {\n                    c.globalAlpha = part.render.opacity;\n                }\n\n                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                    // part sprite\n                    var sprite = part.render.sprite,\n                        texture = _getTexture(render, sprite.texture);\n\n                    c.translate(part.position.x, part.position.y);\n                    c.rotate(part.angle);\n\n                    c.drawImage(\n                        texture,\n                        texture.width * -sprite.xOffset * sprite.xScale,\n                        texture.height * -sprite.yOffset * sprite.yScale,\n                        texture.width * sprite.xScale,\n                        texture.height * sprite.yScale\n                    );\n\n                    // revert translation, hopefully faster than save / restore\n                    c.rotate(-part.angle);\n                    c.translate(-part.position.x, -part.position.y);\n                } else {\n                    // part polygon\n                    if (part.circleRadius) {\n                        c.beginPath();\n                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                    } else {\n                        c.beginPath();\n                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                        for (var j = 1; j < part.vertices.length; j++) {\n                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                            } else {\n                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                            }\n\n                            if (part.vertices[j].isInternal && !showInternalEdges) {\n                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                            }\n                        }\n\n                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        c.closePath();\n                    }\n\n                    if (!options.wireframes) {\n                        c.fillStyle = part.render.fillStyle;\n\n                        if (part.render.lineWidth) {\n                            c.lineWidth = part.render.lineWidth;\n                            c.strokeStyle = part.render.strokeStyle;\n                            c.stroke();\n                        }\n\n                        c.fill();\n                    } else {\n                        c.lineWidth = 1;\n                        c.strokeStyle = '#bbb';\n                        c.stroke();\n                    }\n                }\n\n                c.globalAlpha = 1;\n            }\n        }\n    };\n\n    /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyWireframes = function(render, bodies, context) {\n        var c = context,\n            showInternalEdges = render.options.showInternalEdges,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                for (j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                }\n\n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = '#bbb';\n        c.stroke();\n    };\n\n    /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyConvexHulls = function(render, bodies, context) {\n        var c = context,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible || body.parts.length === 1)\n                continue;\n\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n    };\n\n    /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.vertexNumbers = function(render, bodies, context) {\n        var c = context,\n            i,\n            j,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n                var part = parts[k];\n                for (j = 0; j < part.vertices.length; j++) {\n                    c.fillStyle = 'rgba(255,255,255,0.2)';\n                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                }\n            }\n        }\n    };\n\n    /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */\n    Render.mousePosition = function(render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n    };\n\n    /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyBounds = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n                var parts = bodies[i].parts;\n                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    var part = parts[j];\n                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyAxes = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n\n            if (!body.render.visible)\n                continue;\n\n            if (options.showAxes) {\n                // render all axes\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        var axis = part.axes[k];\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                    }\n                }\n            } else {\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        // render a single axis indicator\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2,\n                            (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\n                    }\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n        } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n        }\n\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n    };\n\n    /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyPositions = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            body,\n            part,\n            i,\n            k;\n\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'indianred';\n        } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (body.render.visible) {\n                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n    };\n\n    /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyVelocity = function(render, bodies, context) {\n        var c = context;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            var velocity = Body.getVelocity(body);\n\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + velocity.x, body.position.y + velocity.y);\n        }\n\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n    };\n\n    /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyIds = function(render, bodies, context) {\n        var c = context,\n            i,\n            j;\n\n        for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible)\n                continue;\n\n            var parts = bodies[i].parts;\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.font = \"12px Arial\";\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.collisions = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            for (j = 0; j < pair.activeContacts.length; j++) {\n                var contact = pair.activeContacts[j],\n                    vertex = contact.vertex;\n                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n            c.fillStyle = 'orange';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n                var normalPosX = pair.activeContacts[0].vertex.x,\n                    normalPosY = pair.activeContacts[0].vertex.y;\n\n                if (pair.activeContacts.length === 2) {\n                    normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                    normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n                }\n\n                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                } else {\n                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                }\n\n                c.lineTo(normalPosX, normalPosY);\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.separations = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n\n            var k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n\n            k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */\n    Render.inspector = function(inspector, context) {\n        var engine = inspector.engine,\n            selected = inspector.selected,\n            render = inspector.render,\n            options = render.options,\n            bounds;\n\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n\n        for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1,2]);\n\n            switch (item.type) {\n\n            case 'body':\n\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3),\n                    Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            case 'constraint':\n\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA)\n                    point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y),\n                Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n        }\n\n        if (options.hasBounds)\n            context.setTransform(1, 0, 0, 1, 0, 0);\n    };\n\n    /**\n     * Updates render timing.\n     * @method _updateTiming\n     * @private\n     * @param {render} render\n     * @param {number} time\n     */\n    var _updateTiming = function(render, time) {\n        var engine = render.engine,\n            timing = render.timing,\n            historySize = timing.historySize,\n            timestamp = engine.timing.timestamp;\n\n        timing.delta = time - timing.lastTime || Render._goodDelta;\n        timing.lastTime = time;\n\n        timing.timestampElapsed = timestamp - timing.lastTimestamp || 0;\n        timing.lastTimestamp = timestamp;\n\n        timing.deltaHistory.unshift(timing.delta);\n        timing.deltaHistory.length = Math.min(timing.deltaHistory.length, historySize);\n\n        timing.engineDeltaHistory.unshift(engine.timing.lastDelta);\n        timing.engineDeltaHistory.length = Math.min(timing.engineDeltaHistory.length, historySize);\n\n        timing.timestampElapsedHistory.unshift(timing.timestampElapsed);\n        timing.timestampElapsedHistory.length = Math.min(timing.timestampElapsedHistory.length, historySize);\n\n        timing.engineElapsedHistory.unshift(engine.timing.lastElapsed);\n        timing.engineElapsedHistory.length = Math.min(timing.engineElapsedHistory.length, historySize);\n\n        timing.elapsedHistory.unshift(timing.lastElapsed);\n        timing.elapsedHistory.length = Math.min(timing.elapsedHistory.length, historySize);\n    };\n\n    /**\n     * Returns the mean value of the given numbers.\n     * @method _mean\n     * @private\n     * @param {Number[]} values\n     * @return {Number} the mean of given values\n     */\n    var _mean = function(values) {\n        var result = 0;\n        for (var i = 0; i < values.length; i += 1) {\n            result += values[i];\n        }\n        return (result / values.length) || 0;\n    };\n\n    /**\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */\n    var _createCanvas = function(width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function() { return false; };\n        canvas.onselectstart = function() { return false; };\n        return canvas;\n    };\n\n    /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */\n    var _getPixelRatio = function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    };\n\n    /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */\n    var _getTexture = function(render, imagePath) {\n        var image = render.textures[imagePath];\n\n        if (image)\n            return image;\n\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n\n        return image;\n    };\n\n    /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */\n    var _applyBackground = function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @deprecated\n     * @property controller\n     * @type render\n     */\n\n    /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */\n\n    /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */\n\n    /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */\n\n    /**\n     * A `Bounds` object that specifies the drawing view region.\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */\n\n    /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */\n\n    /**\n     * The mouse to render if `render.options.showMousePosition` is enabled.\n     *\n     * @property mouse\n     * @type mouse\n     * @default null\n     */\n\n    /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */\n\n    /**\n     * The target width in pixels of the `render.canvas` to be created.\n     * See also the `options.pixelRatio` property to change render quality.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */\n\n    /**\n     * The target height in pixels of the `render.canvas` to be created.\n     * See also the `options.pixelRatio` property to change render quality.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */\n\n    /**\n     * The [pixel ratio](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio) to use when rendering.\n     *\n     * @property options.pixelRatio\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A CSS background color string to use when `render.options.wireframes` is disabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.background\n     * @type string\n     * @default '#14151f'\n     */\n\n    /**\n     * A CSS background color string to use when `render.options.wireframes` is enabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.wireframeBackground\n     * @type string\n     * @default '#14151f'\n     */\n\n    /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable all debug information overlays together.  \n     * This includes and has priority over the values of:\n     *\n     * - `render.options.showStats`\n     * - `render.options.showPerformance`\n     *\n     * @property options.showDebug\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the engine stats info overlay.  \n     * From left to right, the values shown are:\n     *\n     * - body parts total\n     * - body total\n     * - constraints total\n     * - composites total\n     * - collision pairs total\n     *\n     * @property options.showStats\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable performance charts.  \n     * From left to right, the values shown are:\n     *\n     * - average render frequency (e.g. 60 fps)\n     * - exact engine delta time used for last update (e.g. 16.66ms)\n     * - average engine execution duration (e.g. 5.00ms)\n     * - average render execution duration (e.g. 0.40ms)\n     * - average effective play speed (e.g. '1.00x' is 'real-time')\n     *\n     * Each value is recorded over a fixed sample of past frames (60 frames).\n     *\n     * A chart shown below each value indicates the variance from the average over the sample.\n     * The more stable or fixed the value is the flatter the chart will appear.\n     *\n     * @property options.showPerformance\n     * @type boolean\n     * @default false\n     */\n    \n    /**\n     * A flag to enable or disable rendering entirely.\n     *\n     * @property options.enabled\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to toggle wireframe rendering otherwise solid fill rendering is used.\n     *\n     * @property options.wireframes\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A flag to enable or disable sleeping bodies indicators.\n     *\n     * @property options.showSleeping\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A flag to enable or disable the debug information overlay.\n     *\n     * @property options.showDebug\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the collision broadphase debug overlay.\n     *\n     * @deprecated no longer implemented\n     * @property options.showBroadphase\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body bounds debug overlay.\n     *\n     * @property options.showBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body velocity debug overlay.\n     *\n     * @property options.showVelocity\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body collisions debug overlay.\n     *\n     * @property options.showCollisions\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the collision resolver separations debug overlay.\n     *\n     * @property options.showSeparations\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body axes debug overlay.\n     *\n     * @property options.showAxes\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body positions debug overlay.\n     *\n     * @property options.showPositions\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body angle debug overlay.\n     *\n     * @property options.showAngleIndicator\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body and part ids debug overlay.\n     *\n     * @property options.showIds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body vertex numbers debug overlay.\n     *\n     * @property options.showVertexNumbers\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body convex hulls debug overlay.\n     *\n     * @property options.showConvexHulls\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body internal edges debug overlay.\n     *\n     * @property options.showInternalEdges\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the mouse position debug overlay.\n     *\n     * @property options.showMousePosition\n     * @type boolean\n     * @default false\n     */\n\n})();\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Runner` module is an optional utility which provides a game loop, \n* that handles continuously updating a `Matter.Engine` for you within a browser.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n* Instead just call `Engine.update(engine, delta)` in your own loop.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/\n\nvar Runner = {};\n\nmodule.exports = Runner;\n\nvar Events = __webpack_require__(5);\nvar Engine = __webpack_require__(17);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    if (!_requestAnimationFrame) {\n        var _frameTimeout;\n\n        _requestAnimationFrame = function(callback){ \n            _frameTimeout = setTimeout(function() { \n                callback(Common.now()); \n            }, 1000 / 60);\n        };\n\n        _cancelAnimationFrame = function() {\n            clearTimeout(_frameTimeout);\n        };\n    }\n\n    /**\n     * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * @method create\n     * @param {} options\n     */\n    Runner.create = function(options) {\n        var defaults = {\n            fps: 60,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n        };\n\n        var runner = Common.extend(defaults, options);\n\n        runner.delta = runner.delta || 1000 / runner.fps;\n        runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n        runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n        runner.fps = 1000 / runner.delta;\n\n        return runner;\n    };\n\n    /**\n     * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n     * @method run\n     * @param {engine} engine\n     */\n    Runner.run = function(runner, engine) {\n        // create runner if engine is first argument\n        if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n        }\n\n        (function run(time){\n            runner.frameRequestId = _requestAnimationFrame(run);\n\n            if (time && runner.enabled) {\n                Runner.tick(runner, engine, time);\n            }\n        })();\n\n        return runner;\n    };\n\n    /**\n     * A game loop utility that updates the engine and renderer by one step (a 'tick').\n     * Features delta smoothing, time correction and fixed or dynamic timing.\n     * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */\n    Runner.tick = function(runner, engine, time) {\n        var timing = engine.timing,\n            delta;\n\n        if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n        } else {\n            // dynamic timestep based on wall clock between calls\n            delta = (time - runner.timePrev) || runner.delta;\n            runner.timePrev = time;\n\n            // optimistically filter delta over a few frames, to improve stability\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory);\n\n            // limit delta\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta;\n\n            // update engine timing object\n            runner.delta = delta;\n        }\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(runner, 'beforeTick', event);\n\n        // fps counter\n        runner.frameCounter += 1;\n        if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n        }\n\n        Events.trigger(runner, 'tick', event);\n\n        // update\n        Events.trigger(runner, 'beforeUpdate', event);\n\n        Engine.update(engine, delta);\n\n        Events.trigger(runner, 'afterUpdate', event);\n\n        Events.trigger(runner, 'afterTick', event);\n    };\n\n    /**\n     * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n     * @method stop\n     * @param {runner} runner\n     */\n    Runner.stop = function(runner) {\n        _cancelAnimationFrame(runner.frameRequestId);\n    };\n\n    /**\n     * Alias for `Runner.run`.\n     * @method start\n     * @param {runner} runner\n     * @param {engine} engine\n     */\n    Runner.start = function(runner, engine) {\n        Runner.run(runner, engine);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired at the start of a tick, before any updates to the engine or timing\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine timing updated, but just before update\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired at the end of a tick, after engine update and after rendering\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after update\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A flag that specifies whether the runner is running or not.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n     *\n     * @property isFixed\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that specifies the time step between updates in milliseconds.\n     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n     *\n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */\n\n})();\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* This module has now been replaced by `Matter.Collision`.\n*\n* All usage should be migrated to `Matter.Collision`.\n* For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\n*\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n* @deprecated\n*/\n\nvar SAT = {};\n\nmodule.exports = SAT;\n\nvar Collision = __webpack_require__(8);\nvar Common = __webpack_require__(0);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @deprecated replaced by Collision.collides\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {collision} collision\n     */\n    SAT.collides = function(bodyA, bodyB) {\n        return Collision.collides(bodyA, bodyB);\n    };\n\n    deprecated(SAT, 'collides', 'SAT.collides \u27A4 replaced by Collision.collides');\n\n})();\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/\n\nvar Svg = {};\n\nmodule.exports = Svg;\n\nvar Bounds = __webpack_require__(1);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * You must load the `pathseg.js` polyfill on newer browsers.\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */\n    Svg.pathToVertices = function(path, sampleLength) {\n        if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n        }\n\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i, il, total, point, segment, segments, \n            segmentsQueue, lastSegment, \n            lastPoint, segmentIndex, points = [],\n            lx, ly, length = 0, x = 0, y = 0;\n\n        sampleLength = sampleLength || 15;\n\n        var addPoint = function(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n            // when the last point doesn't equal the current point add the current point\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                if (lastPoint && isRelative) {\n                    lx = lastPoint.x;\n                    ly = lastPoint.y;\n                } else {\n                    lx = 0;\n                    ly = 0;\n                }\n\n                var point = {\n                    x: lx + px,\n                    y: ly + py\n                };\n\n                // set last point\n                if (isRelative || !lastPoint) {\n                    lastPoint = point;\n                }\n\n                points.push(point);\n\n                x = lx + px;\n                y = ly + py;\n            }\n        };\n\n        var addSegmentPoint = function(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n            // skip path ends\n            if (segType === 'Z') \n                return;\n\n            // map segment to x and y\n            switch (segType) {\n\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n            case 'H':\n                x = segment.x;\n                break;\n            case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        Svg._svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\n            segments.push(path.pathSegList.getItem(i));\n\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex];\n\n            // new segment\n            if (segment != lastSegment) {\n                while (segmentsQueue.length && segmentsQueue[0] != segment)\n                    addSegmentPoint(segmentsQueue.shift());\n\n                lastSegment = segment;\n            }\n\n            // add points in between when curving\n            // TODO: adaptive sampling\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n\n            }\n\n            // increment by sample value\n            length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i)\n            addSegmentPoint(segmentsQueue[i]);\n\n        return points;\n    };\n\n    Svg._svgPathToAbsolute = function(path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        // Copyright (c) Gavin Kistner\n        // http://phrogz.net/js/_ReuseLicense.txt\n        // Modifications: tidy formatting and naming\n        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\n            x = 0, y = 0, len = segs.numberOfItems;\n\n        for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n                if ('x' in seg) x = seg.x;\n                if ('y' in seg) y = seg.y;\n            } else {\n                if ('x1' in seg) x1 = x + seg.x1;\n                if ('x2' in seg) x2 = x + seg.x2;\n                if ('y1' in seg) y1 = y + seg.y1;\n                if ('y2' in seg) y2 = y + seg.y2;\n                if ('x' in seg) x += seg.x;\n                if ('y' in seg) y += seg.y;\n\n                switch (segType) {\n\n                case 'm':\n                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                    break;\n                case 'l':\n                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                    break;\n                case 'h':\n                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                    break;\n                case 'v':\n                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                    break;\n                case 'c':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                    break;\n                case 's':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                    break;\n                case 'q':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                    break;\n                case 't':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                    break;\n                case 'a':\n                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                    break;\n                case 'z':\n                case 'Z':\n                    x = x0;\n                    y = y0;\n                    break;\n\n                }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n                x0 = x;\n                y0 = y;\n            }\n        }\n    };\n\n})();\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* This module has now been replaced by `Matter.Composite`.\n*\n* All usage should be migrated to the equivalent functions found on `Matter.Composite`.\n* For example `World.add(world, body)` now becomes `Composite.add(world, body)`.\n*\n* The property `world.gravity` has been moved to `engine.gravity`.\n*\n* For back-compatibility purposes this module will remain as a direct alias to `Matter.Composite` in the short term during migration.\n* Eventually this alias module will be marked as deprecated and then later removed in a future release.\n*\n* @class World\n*/\n\nvar World = {};\n\nmodule.exports = World;\n\nvar Composite = __webpack_require__(6);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * See above, aliases for back compatibility only\n     */\n    World.create = Composite.create;\n    World.add = Composite.add;\n    World.remove = Composite.remove;\n    World.clear = Composite.clear;\n    World.addComposite = Composite.addComposite;\n    World.addBody = Composite.addBody;\n    World.addConstraint = Composite.addConstraint;\n\n})();\n\n\n/***/ })\n/******/ ]);\n});", "const { regClass, property } = Laya;\r\n\r\n@regClass('06c54030-60e3-451a-a14b-bfb8f72424fd', 'script/ball/ball2d.ts')\r\nexport class ball2d extends Laya.Script {\r\n    @property(Laya.Sprite)\r\n    sp:Laya.Sprite = null\r\n    setTexture(textuer:Laya.RenderTexture){\r\n        this.sp.texture =   new Laya.Texture(textuer)\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * \u7EC4\u4EF6\u88AB\u6FC0\u6D3B\u540E\u6267\u884C\uFF0C\u6B64\u65F6\u6240\u6709\u8282\u70B9\u548C\u7EC4\u4EF6\u5747\u5DF2\u521B\u5EFA\u5B8C\u6BD5\uFF0C\u6B64\u65B9\u6CD5\u53EA\u6267\u884C\u4E00\u6B21\r\n     */\r\n    //onAwake(): void {}\r\n\r\n    /**\r\n     * \u7EC4\u4EF6\u88AB\u542F\u7528\u540E\u6267\u884C\uFF0C\u4F8B\u5982\u8282\u70B9\u88AB\u6DFB\u52A0\u5230\u821E\u53F0\u540E\r\n     */\r\n    //onEnable(): void {}\r\n\r\n    /**\r\n     * \u7EC4\u4EF6\u88AB\u7981\u7528\u65F6\u6267\u884C\uFF0C\u4F8B\u5982\u4ECE\u8282\u70B9\u4ECE\u821E\u53F0\u79FB\u9664\u540E\r\n     */\r\n    //onDisable(): void {}\r\n\r\n    /**\r\n     * \u7B2C\u4E00\u6B21\u6267\u884Cupdate\u4E4B\u524D\u6267\u884C\uFF0C\u53EA\u4F1A\u6267\u884C\u4E00\u6B21\r\n     */\r\n    //onStart(): void {}\r\n\r\n    /**\r\n     * \u624B\u52A8\u8C03\u7528\u8282\u70B9\u9500\u6BC1\u65F6\u6267\u884C\r\n     */\r\n    //onDestroy(): void {\r\n\r\n    /**\r\n     * \u6BCF\u5E27\u66F4\u65B0\u65F6\u6267\u884C\uFF0C\u5C3D\u91CF\u4E0D\u8981\u5728\u8FD9\u91CC\u5199\u5927\u5FAA\u73AF\u903B\u8F91\u6216\u8005\u4F7F\u7528getComponent\u65B9\u6CD5\r\n     */\r\n    //onUpdate(): void {}\r\n\r\n    /**\r\n     * \u6BCF\u5E27\u66F4\u65B0\u65F6\u6267\u884C\uFF0C\u5728update\u4E4B\u540E\u6267\u884C\uFF0C\u5C3D\u91CF\u4E0D\u8981\u5728\u8FD9\u91CC\u5199\u5927\u5FAA\u73AF\u903B\u8F91\u6216\u8005\u4F7F\u7528getComponent\u65B9\u6CD5\r\n     */\r\n    //onLateUpdate(): void {}\r\n\r\n    /**\r\n     * \u9F20\u6807\u70B9\u51FB\u540E\u6267\u884C\u3002\u4E0E\u4EA4\u4E92\u76F8\u5173\u7684\u8FD8\u6709onMouseDown\u7B49\u5341\u591A\u4E2A\u51FD\u6570\uFF0C\u5177\u4F53\u8BF7\u53C2\u9605\u6587\u6863\u3002\r\n     */\r\n    //onMouseClick(): void {}\r\n}", "import { ball2d } from \"./ball2d\";\r\n\r\nconst { regClass, property } = Laya;\r\n@regClass('20bfe878-cd06-49ec-9d52-3521f2c224ff', 'script/ball/ball2dManager.ts')\r\nexport class ball2dManager extends Laya.Script {\r\n    @property(Laya.Node)\r\n    scene2dNode:Laya.Node = null\r\n    @property(Laya.Prefab)\r\n    ball2d:Laya.Prefab = null\r\n\r\n    /**\r\n     * \u63D2\u5165\u8282\u70B9\r\n     * @param index \r\n     * @param position \r\n     */\r\n    insertValue(position:Laya.Vector2):ball2d{\r\n        let ball =  this.ball2d.create()\r\n        this.scene2dNode.addChild(ball);\r\n        (ball as Laya.Sprite).pos(position.x,position.y)\r\n        return  ball.getComponent(ball2d)\r\n    }\r\n    /**\r\n     * \u7EC4\u4EF6\u88AB\u6FC0\u6D3B\u540E\u6267\u884C\uFF0C\u6B64\u65F6\u6240\u6709\u8282\u70B9\u548C\u7EC4\u4EF6\u5747\u5DF2\u521B\u5EFA\u5B8C\u6BD5\uFF0C\u6B64\u65B9\u6CD5\u53EA\u6267\u884C\u4E00\u6B21\r\n     */\r\n    //onAwake(): void {}\r\n\r\n    /**\r\n     * \u7EC4\u4EF6\u88AB\u542F\u7528\u540E\u6267\u884C\uFF0C\u4F8B\u5982\u8282\u70B9\u88AB\u6DFB\u52A0\u5230\u821E\u53F0\u540E\r\n     */\r\n    //onEnable(): void {}\r\n\r\n    /**\r\n     * \u7EC4\u4EF6\u88AB\u7981\u7528\u65F6\u6267\u884C\uFF0C\u4F8B\u5982\u4ECE\u8282\u70B9\u4ECE\u821E\u53F0\u79FB\u9664\u540E\r\n     */\r\n    //onDisable(): void {}\r\n\r\n    /**\r\n     * \u7B2C\u4E00\u6B21\u6267\u884Cupdate\u4E4B\u524D\u6267\u884C\uFF0C\u53EA\u4F1A\u6267\u884C\u4E00\u6B21\r\n     */\r\n    //onStart(): void {}\r\n\r\n    /**\r\n     * \u624B\u52A8\u8C03\u7528\u8282\u70B9\u9500\u6BC1\u65F6\u6267\u884C\r\n     */\r\n    //onDestroy(): void {\r\n\r\n    /**\r\n     * \u6BCF\u5E27\u66F4\u65B0\u65F6\u6267\u884C\uFF0C\u5C3D\u91CF\u4E0D\u8981\u5728\u8FD9\u91CC\u5199\u5927\u5FAA\u73AF\u903B\u8F91\u6216\u8005\u4F7F\u7528getComponent\u65B9\u6CD5\r\n     */\r\n    //onUpdate(): void {}\r\n\r\n    /**\r\n     * \u6BCF\u5E27\u66F4\u65B0\u65F6\u6267\u884C\uFF0C\u5728update\u4E4B\u540E\u6267\u884C\uFF0C\u5C3D\u91CF\u4E0D\u8981\u5728\u8FD9\u91CC\u5199\u5927\u5FAA\u73AF\u903B\u8F91\u6216\u8005\u4F7F\u7528getComponent\u65B9\u6CD5\r\n     */\r\n    //onLateUpdate(): void {}\r\n\r\n    /**\r\n     * \u9F20\u6807\u70B9\u51FB\u540E\u6267\u884C\u3002\u4E0E\u4EA4\u4E92\u76F8\u5173\u7684\u8FD8\u6709onMouseDown\u7B49\u5341\u591A\u4E2A\u51FD\u6570\uFF0C\u5177\u4F53\u8BF7\u53C2\u9605\u6587\u6863\u3002\r\n     */\r\n    //onMouseClick(): void {}\r\n}", "const { regClass, property } = Laya;\r\nimport RenderTexture = Laya.RenderTexture;\r\nimport RenderTargetFormat = Laya.RenderTargetFormat\r\n@regClass('0943151a-e93b-408a-bcf2-7732e3e472dd', 'script/ball/ball3d.ts')\r\nexport class ball3d extends Laya.Script {\r\n    //declare owner : Laya.Sprite3D;\r\n\r\n    @property(Laya.Camera)\r\n    camera:Laya.Camera  = null\r\n    @property([Laya.Texture2D])\r\n    textureList:Laya.Texture2D[] = []\r\n    @property(Laya.MeshRenderer)\r\n    renderMesh:Laya.MeshRenderer = null\r\n\r\n    outRenderTexture:Laya.RenderTexture = null\r\n\r\n    @property(Laya.Node)\r\n    ballNode:Laya.Node  =null\r\n    @property(Laya.Texture2D)\r\n    normalMap:Laya.Texture2D = null\r\n    onStart(): void {\r\n     }\r\n\r\n    setValue(index:number){\r\n        let material =  new  Laya.BlinnPhongMaterial\r\n        material.renderMode = Laya.MaterialRenderMode.RENDERMODE_TRANSPARENT\r\n        material.shininess =1\r\n        let texture = this.textureList[index-1]\r\n\r\n        material.albedoTexture= texture\r\n        // material.normalTexture= this.normalMap\r\n        this.renderMesh.material = material\r\n        let renderTexture= new RenderTexture(200, 200, RenderTargetFormat.R16G16B16A16, RenderTargetFormat.DEPTHSTENCIL_24_8, false, 1);\r\n        renderTexture.filterMode = Laya.FilterMode.Bilinear\r\n        this.camera.renderTarget =  renderTexture\r\n        this.outRenderTexture  =  this.camera.renderTarget  \r\n        this.randomRoute()\r\n    }\r\n    randomRoute(){\r\n       let sp =  this.ballNode as Laya.Sprite3D\r\n       sp.transform.rotationEuler = new Laya.Vector3(Math.random()*360,Math.random()*360,Math.random()*360)\r\n    }\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * \u7EC4\u4EF6\u88AB\u6FC0\u6D3B\u540E\u6267\u884C\uFF0C\u6B64\u65F6\u6240\u6709\u8282\u70B9\u548C\u7EC4\u4EF6\u5747\u5DF2\u521B\u5EFA\u5B8C\u6BD5\uFF0C\u6B64\u65B9\u6CD5\u53EA\u6267\u884C\u4E00\u6B21\r\n     */\r\n    //onAwake(): void {}\r\n\r\n    /**\r\n     * \u7EC4\u4EF6\u88AB\u542F\u7528\u540E\u6267\u884C\uFF0C\u4F8B\u5982\u8282\u70B9\u88AB\u6DFB\u52A0\u5230\u821E\u53F0\u540E\r\n     */\r\n    //onEnable(): void {}\r\n\r\n    /**\r\n     * \u7EC4\u4EF6\u88AB\u7981\u7528\u65F6\u6267\u884C\uFF0C\u4F8B\u5982\u4ECE\u8282\u70B9\u4ECE\u821E\u53F0\u79FB\u9664\u540E\r\n     */\r\n    //onDisable(): void {}\r\n\r\n    /**\r\n     * \u7B2C\u4E00\u6B21\u6267\u884Cupdate\u4E4B\u524D\u6267\u884C\uFF0C\u53EA\u4F1A\u6267\u884C\u4E00\u6B21\r\n     */\r\n    //onStart(): void {}\r\n\r\n    /**\r\n     * \u624B\u52A8\u8C03\u7528\u8282\u70B9\u9500\u6BC1\u65F6\u6267\u884C\r\n     */\r\n    //onDestroy(): void {\r\n\r\n    /**\r\n     * \u6BCF\u5E27\u66F4\u65B0\u65F6\u6267\u884C\uFF0C\u5C3D\u91CF\u4E0D\u8981\u5728\u8FD9\u91CC\u5199\u5927\u5FAA\u73AF\u903B\u8F91\u6216\u8005\u4F7F\u7528getComponent\u65B9\u6CD5\r\n     */\r\n    onUpdate(): void {\r\n\r\n    }\r\n\r\n    /**\r\n     * \u6BCF\u5E27\u66F4\u65B0\u65F6\u6267\u884C\uFF0C\u5728update\u4E4B\u540E\u6267\u884C\uFF0C\u5C3D\u91CF\u4E0D\u8981\u5728\u8FD9\u91CC\u5199\u5927\u5FAA\u73AF\u903B\u8F91\u6216\u8005\u4F7F\u7528getComponent\u65B9\u6CD5\r\n     */\r\n    //onLateUpdate(): void {}\r\n\r\n    /**\r\n     * \u9F20\u6807\u70B9\u51FB\u540E\u6267\u884C\u3002\u4E0E\u4EA4\u4E92\u76F8\u5173\u7684\u8FD8\u6709onMouseDown\u7B49\u5341\u591A\u4E2A\u51FD\u6570\uFF0C\u5177\u4F53\u8BF7\u53C2\u9605\u6587\u6863\u3002\r\n     */\r\n    //onMouseClick(): void {}\r\n}", "import { ball3d } from \"./ball3d\";\r\n\r\nconst { regClass, property } = Laya;\r\n\r\n@regClass('a4d0dee3-5109-4390-913f-a05f8f3256df', 'script/ball/ball3dManager.ts')\r\nexport class ball3dManager extends Laya.Script {\r\n    @property(Laya.Node)\r\n    scene3d:Laya.Node = null\r\n    @property(Laya.Prefab)\r\n    ballPre:Laya.Prefab = null\r\n    _addedNum:number =0\r\n\r\n    ballTextueKv:{[key:number]:Laya.RenderTexture} =  {}\r\n    ballCommKv:{[key:number]:ball3d} = {}\r\n    constructor() {\r\n\r\n        super();\r\n    }\r\n    onStart(): void {\r\n    \r\n    }\r\n    /** */\r\n    insertValue(index:number){\r\n        let ball = this.ballPre.create();\r\n        let ball3dComm =  ball.getComponent(ball3d); \r\n        ball3dComm.setValue(index);\r\n        this.scene3d.addChild(ball);\r\n        (ball as Laya.Sprite3D).transform.position = new Laya.Vector3(this._addedNum*100,0,0)\r\n       this._addedNum+=1\r\n       this.ballCommKv[index] = ball3dComm\r\n       this.ballTextueKv[index] =  ball3dComm.outRenderTexture\r\n       \r\n        return ball3dComm\r\n    }\r\n\r\n    /**\r\n     * \u7EC4\u4EF6\u88AB\u6FC0\u6D3B\u540E\u6267\u884C\uFF0C\u6B64\u65F6\u6240\u6709\u8282\u70B9\u548C\u7EC4\u4EF6\u5747\u5DF2\u521B\u5EFA\u5B8C\u6BD5\uFF0C\u6B64\u65B9\u6CD5\u53EA\u6267\u884C\u4E00\u6B21\r\n     */\r\n    //onAwake(): void {}\r\n\r\n    /**\r\n     * \u7EC4\u4EF6\u88AB\u542F\u7528\u540E\u6267\u884C\uFF0C\u4F8B\u5982\u8282\u70B9\u88AB\u6DFB\u52A0\u5230\u821E\u53F0\u540E\r\n     */\r\n    //onEnable(): void {}\r\n\r\n    /**\r\n     * \u7EC4\u4EF6\u88AB\u7981\u7528\u65F6\u6267\u884C\uFF0C\u4F8B\u5982\u4ECE\u8282\u70B9\u4ECE\u821E\u53F0\u79FB\u9664\u540E\r\n     */\r\n    //onDisable(): void {}\r\n\r\n    /**\r\n     * \u7B2C\u4E00\u6B21\u6267\u884Cupdate\u4E4B\u524D\u6267\u884C\uFF0C\u53EA\u4F1A\u6267\u884C\u4E00\u6B21\r\n     */\r\n    //onStart(): void {}\r\n\r\n    /**\r\n     * \u624B\u52A8\u8C03\u7528\u8282\u70B9\u9500\u6BC1\u65F6\u6267\u884C\r\n     */\r\n    //onDestroy(): void {\r\n\r\n    /**\r\n     * \u6BCF\u5E27\u66F4\u65B0\u65F6\u6267\u884C\uFF0C\u5C3D\u91CF\u4E0D\u8981\u5728\u8FD9\u91CC\u5199\u5927\u5FAA\u73AF\u903B\u8F91\u6216\u8005\u4F7F\u7528getComponent\u65B9\u6CD5\r\n     */\r\n    //onUpdate(): void {}\r\n\r\n    /**\r\n     * \u6BCF\u5E27\u66F4\u65B0\u65F6\u6267\u884C\uFF0C\u5728update\u4E4B\u540E\u6267\u884C\uFF0C\u5C3D\u91CF\u4E0D\u8981\u5728\u8FD9\u91CC\u5199\u5927\u5FAA\u73AF\u903B\u8F91\u6216\u8005\u4F7F\u7528getComponent\u65B9\u6CD5\r\n     */\r\n    //onLateUpdate(): void {}\r\n\r\n    /**\r\n     * \u9F20\u6807\u70B9\u51FB\u540E\u6267\u884C\u3002\u4E0E\u4EA4\u4E92\u76F8\u5173\u7684\u8FD8\u6709onMouseDown\u7B49\u5341\u591A\u4E2A\u51FD\u6570\uFF0C\u5177\u4F53\u8BF7\u53C2\u9605\u6587\u6863\u3002\r\n     */\r\n    //onMouseClick(): void {}\r\n}", "import { ball2d } from \"./ball2d\";\r\nimport { ball2dManager } from \"./ball2dManager\";\r\nimport { ball3d } from \"./ball3d\";\r\nimport { ball3dManager } from \"./ball3dManager\";\r\n\r\nconst { regClass, property } = Laya;\r\nexport interface ballGroup{\r\n    ball2d:ball2d\r\n    ball3d:ball3d\r\n}\r\n@regClass('81f2ed27-4d13-433c-b35f-73d85b703cd2', 'script/ball/ballManager.ts')\r\nexport class ballManager extends Laya.Script {\r\n    //declare owner : Laya.Sprite3D;\r\n    ball3dManager:ball3dManager\r\n    ball2dManager:ball2dManager\r\n    ballKv:{[key:number]:ballGroup} = {}\r\n    initBallManager(){\r\n      this.ball3dManager =  this.owner.getComponent(ball3dManager)\r\n    this.ball2dManager=     this.owner.getComponent(ball2dManager)\r\n    }\r\n    /**\r\n     * @param {Laya.Vector2} pos \u7403\u7684\u4F4D\u7F6E \r\n     * @param value \r\n     */\r\n    insertBall(pos:Laya.Vector2,value:number){\r\n       let ball3d = this.ball3dManager.insertValue(value)\r\n        let ball2d = this.ball2dManager.insertValue(pos)\r\n        // //@ts-ignore\r\n        ball2d.setTexture(this.ball3dManager.ballTextueKv[value])\r\n       this.ballKv[value] = {\r\n        ball2d:ball2d,\r\n        ball3d:ball3d\r\n       }\r\n    }\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * \u7EC4\u4EF6\u88AB\u6FC0\u6D3B\u540E\u6267\u884C\uFF0C\u6B64\u65F6\u6240\u6709\u8282\u70B9\u548C\u7EC4\u4EF6\u5747\u5DF2\u521B\u5EFA\u5B8C\u6BD5\uFF0C\u6B64\u65B9\u6CD5\u53EA\u6267\u884C\u4E00\u6B21\r\n     */\r\n    //onAwake(): void {}\r\n\r\n    /**\r\n     * \u7EC4\u4EF6\u88AB\u542F\u7528\u540E\u6267\u884C\uFF0C\u4F8B\u5982\u8282\u70B9\u88AB\u6DFB\u52A0\u5230\u821E\u53F0\u540E\r\n     */\r\n    //onEnable(): void {}\r\n\r\n    /**\r\n     * \u7EC4\u4EF6\u88AB\u7981\u7528\u65F6\u6267\u884C\uFF0C\u4F8B\u5982\u4ECE\u8282\u70B9\u4ECE\u821E\u53F0\u79FB\u9664\u540E\r\n     */\r\n    //onDisable(): void {}\r\n\r\n    /**\r\n     * \u7B2C\u4E00\u6B21\u6267\u884Cupdate\u4E4B\u524D\u6267\u884C\uFF0C\u53EA\u4F1A\u6267\u884C\u4E00\u6B21\r\n     */\r\n    //onStart(): void {}\r\n\r\n    /**\r\n     * \u624B\u52A8\u8C03\u7528\u8282\u70B9\u9500\u6BC1\u65F6\u6267\u884C\r\n     */\r\n    //onDestroy(): void {\r\n\r\n    /**\r\n     * \u6BCF\u5E27\u66F4\u65B0\u65F6\u6267\u884C\uFF0C\u5C3D\u91CF\u4E0D\u8981\u5728\u8FD9\u91CC\u5199\u5927\u5FAA\u73AF\u903B\u8F91\u6216\u8005\u4F7F\u7528getComponent\u65B9\u6CD5\r\n     */\r\n    //onUpdate(): void {}\r\n\r\n    /**\r\n     * \u6BCF\u5E27\u66F4\u65B0\u65F6\u6267\u884C\uFF0C\u5728update\u4E4B\u540E\u6267\u884C\uFF0C\u5C3D\u91CF\u4E0D\u8981\u5728\u8FD9\u91CC\u5199\u5927\u5FAA\u73AF\u903B\u8F91\u6216\u8005\u4F7F\u7528getComponent\u65B9\u6CD5\r\n     */\r\n    //onLateUpdate(): void {}\r\n\r\n    /**\r\n     * \u9F20\u6807\u70B9\u51FB\u540E\u6267\u884C\u3002\u4E0E\u4EA4\u4E92\u76F8\u5173\u7684\u8FD8\u6709onMouseDown\u7B49\u5341\u591A\u4E2A\u51FD\u6570\uFF0C\u5177\u4F53\u8BF7\u53C2\u9605\u6587\u6863\u3002\r\n     */\r\n    //onMouseClick(): void {}\r\n}", "import  { Bodies, Engine, Render, Runner, World } from \"matter-js\";\r\nimport ballWorldConfig from \"./ballWorldConfig\";\r\nimport * as Matter from \"matter-js\";\r\n\r\nexport class billordWorldManager{\r\n    private engine:Engine\r\n    private runner:Runner\r\n    public mainBall:Matter.Body\r\n    public otherBallKv:{[key:number|string]:Matter.Body} = {} \r\n    public ballList:Matter.Body[] =[]\r\n    /**\r\n     * \r\n     * @param isRender nodejs\u670D\u52A1\u5668\u548Ccocos\u5F15\u64CE\u4E0D\u9700\u8981\u5F00\u542F\u6E32\u67D3\r\n     */\r\n    constructor(isRender:boolean =false){\r\n        this.engine = this.createEngine()\r\n        this.mainBall = this.createMainBall()\r\n        this.createBall()\r\n        this.createWall()\r\n        this.runner =  Runner.create();\r\n        isRender && this.createRender()\r\n\r\n    }\r\n    /**\r\n     * \u7269\u7406\u4E16\u754C\u542F\u52A8\r\n     * @param num \r\n     */\r\n    runTick(num:number){\r\n        Matter.Runner.tick(this.runner, this.engine,num);\r\n    }\r\n\r\n    private createRender(){\r\n        let width = ballWorldConfig.deskSize.width\r\n        let height = ballWorldConfig.deskSize.height\r\n        var render = Render.create({\r\n            element: document.body,\r\n            engine: this.engine,\r\n            options: {\r\n                width: width,\r\n                height: height,\r\n                wireframes: false,\r\n            },\r\n        });\r\n        Render.run(render);\r\n        return render\r\n    }\r\n    private createEngine(){\r\n        let engine = Engine.create({\r\n            gravity: { x: 0, y: 0 }, // \u5173\u95ED\u91CD\u529B\u6548\u679C\r\n        });\r\n        return engine\r\n    }\r\n\r\n createMainBall() {\r\n    var restitution  =ballWorldConfig.restitution\r\n        // \u521B\u5EFA\u6BCD\u7403\r\n        var cueBall = Bodies.circle(ballWorldConfig.mainBallPosition.x, ballWorldConfig.mainBallPosition.y, ballWorldConfig.ballRadius, {\r\n            restitution: restitution, // \u8C03\u6574\u56DE\u5F39\u7CFB\u6570\u4EE5\u63A7\u5236\u7403\u7684\u5F39\u8DF3\r\n        });\r\n        World.add(this.engine.world, cueBall);\r\n        this.ballList.push(cueBall)\r\n        return cueBall;\r\n    }\r\n     createBall() {\r\n        let engine  = this.engine\r\n        let ballRadius = ballWorldConfig.ballRadius\r\n        // \u521B\u5EFA\u88AB\u6253\u51FB\u7684\u7403\r\n        var objectBalls: Matter.Body[] = [];\r\n        var numRows =ballWorldConfig.numRows;\r\n        var startX = ballWorldConfig.startBallPos.x;\r\n        var startY = ballWorldConfig.startBallPos.y;\r\n        var restitution  =ballWorldConfig.restitution\r\n    \r\n        for (var row = 0; row < numRows; row++) {\r\n            var ballsInRow = row + 1;\r\n            var rowStartX = startX;\r\n            var rowStartY = startY - row * ballRadius;\r\n            for (var i = 0; i < ballsInRow; i++) {\r\n                var x = rowStartX + (row - numRows / 2) * ballRadius * 2;\r\n                var y = rowStartY + i * ballRadius * 2;\r\n    \r\n                var ball = Bodies.circle(x, y, ballRadius, {\r\n                    restitution: restitution, // \u8C03\u6574\u56DE\u5F39\u7CFB\u6570\u4EE5\u63A7\u5236\u7403\u7684\u5F39\u8DF3\r\n                });\r\n    \r\n                objectBalls.push(ball);\r\n                this.ballList.push(ball)\r\n                this.otherBallKv[ball.id] =ball\r\n            }\r\n        }\r\n    \r\n        // \u5C06\u6240\u6709\u7269\u4F53\u6DFB\u52A0\u5230\u4E16\u754C\u4E2D\r\n        World.add(engine.world, [...objectBalls]);\r\n    }\r\n    createWall(){\r\n        let wallBorder = ballWorldConfig.wallSize.wallBorder\r\n        let width = ballWorldConfig.wallSize.width\r\n        let height = ballWorldConfig.wallSize.height\r\n\r\n        let worldWidth = ballWorldConfig.deskSize.width\r\n        let worldheight = ballWorldConfig.deskSize.height\r\n        let engine = this.engine\r\n                // \u521B\u5EFA\u4E00\u4E2A\u9759\u6001\u77E9\u5F62\u521A\u4F53\r\n                var staticRect = Bodies.rectangle(0, -height/2+wallBorder, width, height, {\r\n                    isStatic: true,\r\n                    restitution: 1, // \u8C03\u6574\u56DE\u5F39\u7CFB\u6570\u4EE5\u63A7\u5236\u7403\u7684\u5F39\u8DF3\r\n                });\r\n                World.add(engine.world, staticRect);\r\n\r\n                var staticRectBanner = Bodies.rectangle(0, worldheight+(height/2)-wallBorder, width, height, {\r\n                    isStatic: true,\r\n                    restitution: 1, // \u8C03\u6574\u56DE\u5F39\u7CFB\u6570\u4EE5\u63A7\u5236\u7403\u7684\u5F39\u8DF3\r\n                });\r\n                World.add(engine.world, staticRectBanner);\r\n\r\n                var staticLeft = Bodies.rectangle(-width/2+wallBorder,0, width, height, {\r\n                    isStatic: true,\r\n                    restitution: 1, // \u8C03\u6574\u56DE\u5F39\u7CFB\u6570\u4EE5\u63A7\u5236\u7403\u7684\u5F39\u8DF3\r\n                });\r\n                World.add(engine.world, staticLeft);\r\n\r\n                var staticRight = Bodies.rectangle(worldWidth+(width/2)-wallBorder,0, width, height, {\r\n                    isStatic: true,\r\n                    restitution: 1, // \u8C03\u6574\u56DE\u5F39\u7CFB\u6570\u4EE5\u63A7\u5236\u7403\u7684\u5F39\u8DF3\r\n                });\r\n\r\n                World.add(engine.world, staticRight);\r\n\r\n    }\r\n\r\n    public runTimeTick(){\r\n        // \u542F\u52A8\u5F15\u64CE\r\n        setInterval(() => {\r\n            Matter.Runner.tick(this.runner, this.engine, 1000 / 60);\r\n        }, 1000 / 60);\r\n                \r\n    };\r\n    /**\r\n     * \u6253\u7403\r\n     * @param angle \r\n     */\r\n    public hitBall(angle:number){\r\n        let angleDir = this.getNormalizedVectorFromAngle(angle);\r\n        let ball = this.mainBall;\r\n        // \u65BD\u52A0\u4E00\u4E2A\u5411\u53F3\u7684\u529B\r\n        var forceMagnitude = 0.05;\r\n        angleDir.x *= forceMagnitude;\r\n        angleDir.y *= forceMagnitude;\r\n        var force = { x: angleDir.x, y: angleDir.y };\r\n        Matter.Body.applyForce(ball, ball.position, force);\r\n    }\r\n\r\n    getNormalizedVectorFromAngle(angle: number): { x: number; y: number } {\r\n        const degree = angle % 360; // \u5C06\u89D2\u5EA6\u9650\u5236\u5728 0 \u5230 360 \u5EA6\u4E4B\u95F4\r\n        const radian = (degree * Math.PI) / 180; // \u5C06\u89D2\u5EA6\u8F6C\u6362\u4E3A\u5F27\u5EA6\r\n        const x = Math.cos(radian);\r\n        const y = Math.sin(radian);\r\n        return { x, y };\r\n    }\r\n    /**\r\n     * \u5728\u7269\u7406\u4E16\u754C\u4E2D\u65BD\u52A0\u529B\r\n     * @param normal \r\n     * @param hitEnergy \r\n     */\r\n    hitNormal(normal:{x:number,y:number},hitEnergy:number =0.05){\r\n        let force = normal\r\n        normal.x *= hitEnergy;\r\n        normal.y *= hitEnergy;\r\n        let ball = this.mainBall;\r\n        Matter.Body.applyForce(ball, ball.position, force);\r\n    }\r\n    \r\n}", "export default {\r\n    ballRadius:12.5,//\u7403\u521A\u4F53\u7684\u534A\u5F84\r\n    mainBallPosition:{//\u4E3B\u7403\u7684\u4F4D\u7F6E\r\n        x:100,\r\n        y:223\r\n    },\r\n    startBallPos:{//\u5F00\u5934\u7403\u7684\r\n        x:500,\r\n        y:223,\r\n    },\r\n    numRows:5,//\u5176\u4ED6\u7403\u7684\u5217\u6570\r\n    deskSize:{//\u7269\u7406\u4E16\u754C\u4E2D\u684C\u5B50\u7684\u5C3A\u5BF8\r\n        width:817,\r\n        height:454\r\n    },\r\n    restitution:1,\r\n    wallSize:{\r\n        width:100000,\r\n        height:100000,\r\n        wallBorder:40//\u5899\u4F53\u539A\u5EA6\r\n    }\r\n}", "const { regClass, property } = Laya;\r\n\r\n@regClass('b3360337-ccae-48c7-959d-4cab4466807e', 'script/comm/billordCubeBarComm.ts')\r\nexport class billordCubeBarComm extends Laya.Script {\r\n    @property(Laya.Node)\r\n    cubeNode:Laya.Node =null\r\n    //declare owner : Laya.Sprite3D;\r\n    onStart(): void {\r\n        //@ts-ignore\r\n    }\r\n    runAction(){\r\n        return new Promise((reslove:Function)=>{\r\n            let tween = new Laya.Tween()\r\n            tween.from(this.cubeNode,{y:0},0)\r\n            tween.to(this.cubeNode,{y:100},500, null,new Laya.Handler(this,()=>{\r\n                tween.to(this.cubeNode,{y:0},50,null,new Laya.Handler(this,()=>{\r\n    \r\n                    reslove(null)\r\n                   \r\n                }))\r\n            }))\r\n        })\r\n\r\n        // tween.to(this.cubeNode,{y:0},500,null,new Laya.Handler(()=>{\r\n        //     console.warn(\"\u7ED3\u675F\u4E86===\u300B\")\r\n        // }))\r\n        \r\n    }\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * \u7EC4\u4EF6\u88AB\u6FC0\u6D3B\u540E\u6267\u884C\uFF0C\u6B64\u65F6\u6240\u6709\u8282\u70B9\u548C\u7EC4\u4EF6\u5747\u5DF2\u521B\u5EFA\u5B8C\u6BD5\uFF0C\u6B64\u65B9\u6CD5\u53EA\u6267\u884C\u4E00\u6B21\r\n     */\r\n    //onAwake(): void {}\r\n\r\n    /**\r\n     * \u7EC4\u4EF6\u88AB\u542F\u7528\u540E\u6267\u884C\uFF0C\u4F8B\u5982\u8282\u70B9\u88AB\u6DFB\u52A0\u5230\u821E\u53F0\u540E\r\n     */\r\n    //onEnable(): void {}\r\n\r\n    /**\r\n     * \u7EC4\u4EF6\u88AB\u7981\u7528\u65F6\u6267\u884C\uFF0C\u4F8B\u5982\u4ECE\u8282\u70B9\u4ECE\u821E\u53F0\u79FB\u9664\u540E\r\n     */\r\n    //onDisable(): void {}\r\n\r\n    /**\r\n     * \u7B2C\u4E00\u6B21\u6267\u884Cupdate\u4E4B\u524D\u6267\u884C\uFF0C\u53EA\u4F1A\u6267\u884C\u4E00\u6B21\r\n     */\r\n    //onStart(): void {}\r\n\r\n    /**\r\n     * \u624B\u52A8\u8C03\u7528\u8282\u70B9\u9500\u6BC1\u65F6\u6267\u884C\r\n     */\r\n    //onDestroy(): void {\r\n\r\n    /**\r\n     * \u6BCF\u5E27\u66F4\u65B0\u65F6\u6267\u884C\uFF0C\u5C3D\u91CF\u4E0D\u8981\u5728\u8FD9\u91CC\u5199\u5927\u5FAA\u73AF\u903B\u8F91\u6216\u8005\u4F7F\u7528getComponent\u65B9\u6CD5\r\n     */\r\n    //onUpdate(): void {}\r\n\r\n    /**\r\n     * \u6BCF\u5E27\u66F4\u65B0\u65F6\u6267\u884C\uFF0C\u5728update\u4E4B\u540E\u6267\u884C\uFF0C\u5C3D\u91CF\u4E0D\u8981\u5728\u8FD9\u91CC\u5199\u5927\u5FAA\u73AF\u903B\u8F91\u6216\u8005\u4F7F\u7528getComponent\u65B9\u6CD5\r\n     */\r\n    //onLateUpdate(): void {}\r\n\r\n    /**\r\n     * \u9F20\u6807\u70B9\u51FB\u540E\u6267\u884C\u3002\u4E0E\u4EA4\u4E92\u76F8\u5173\u7684\u8FD8\u6709onMouseDown\u7B49\u5341\u591A\u4E2A\u51FD\u6570\uFF0C\u5177\u4F53\u8BF7\u53C2\u9605\u6587\u6863\u3002\r\n     */\r\n    //onMouseClick(): void {}\r\n}", "import { ball3dManager } from \"./ball/ball3dManager\";\r\nimport { ballManager } from \"./ball/ballManager\";\r\nimport { billordWorldManager } from \"./billordWorldManager\";\r\nimport { billordCubeBarComm } from \"./comm/billordCubeBarComm\";\r\n\r\nconst { regClass, property } = Laya;\r\n\r\n@regClass('8e3b7db3-2492-4e8f-8b42-195285ed59b9', 'script/ballMain.ts')\r\nexport class ballMain extends Laya.Script {\r\n\r\n    @property(Laya.Node)\r\n    touchNode: Laya.Node = null\r\n    @property(billordCubeBarComm)\r\n    billordCube: billordCubeBarComm = null\r\n\r\n    ballworld: billordWorldManager = null\r\n    constructor() {\r\n        super();\r\n    }\r\n    ballManager: ballManager = null\r\n\r\n    onStart(): void {\r\n        let ballword = this.ballworld = new billordWorldManager\r\n        this.ballManager = this.owner.getComponent(ballManager)\r\n        this.ballManager.initBallManager()\r\n        this.ballManager.insertBall(new Laya.Vector2(ballword.mainBall.position.x, ballword.mainBall.position.y), 1)\r\n        let otherballList = Object.keys(ballword.otherBallKv)\r\n        for (let i = 0; i < otherballList.length; i++) {\r\n            let index = Number(otherballList[i])\r\n            let ball = ballword.otherBallKv[index]\r\n            this.ballManager.insertBall(new Laya.Vector2(ball.position.x, ball.position.y), index)\r\n        }\r\n        this.listenTouch()\r\n\r\n    }\r\n    listenTouch() {\r\n        Laya.stage.on(Laya.Event.MOUSE_DOWN, this, this.mouseStart)\r\n\r\n    }\r\n    mouseStart() {\r\n        Laya.stage.on(Laya.Event.MOUSE_MOVE, this, this.mouseMove)\r\n        Laya.stage.on(Laya.Event.MOUSE_UP, this, this.mouseEnd)\r\n        this.selectAngle()\r\n    }\r\n    mouseMove() {\r\n        this.selectAngle()\r\n    }\r\n     mouseEnd() {\r\n        return new Promise(async (reslove:Function)=>{\r\n\r\n        let billordCube = this.billordCube.owner as Laya.Sprite\r\n        await this.billordCube.runAction()\r\n\r\n\r\n        let mapSp = this.ballManager.ball2dManager.scene2dNode as Laya.Sprite\r\n        let mainPos = new Laya.Vector2(this.ballworld.mainBall.position.x, this.ballworld.mainBall.position.y)\r\n        let pos = new Laya.Vector2(Laya.stage.mouseX, Laya.stage.mouseY)\r\n        let globalPos = mapSp.globalToLocal(new Laya.Point(pos.x, pos.y), true)\r\n        let inMainLocalPos = new Laya.Vector2(globalPos.x - mainPos.x, globalPos.y - mainPos.y)\r\n        let normal = new Laya.Vector2()\r\n    \r\n        Laya.Vector2.normalize(inMainLocalPos, normal)\r\n        this.ballworld.hitNormal(normal)\r\n\r\n        setTimeout(() => {\r\n            billordCube.visible = false\r\n            reslove(null)\r\n        }, 200);\r\n        Laya.stage.off(Laya.Event.MOUSE_MOVE, this, this.mouseMove)\r\n        Laya.stage.off(Laya.Event.MOUSE_UP, this, this.mouseEnd)\r\n    })\r\n\r\n        \r\n    }\r\n    \r\n    routeAngle(pos:{x:number,y:number},angle:number){\r\n        angle = Math.PI/180 * angle\r\n        return {\r\n            x:(Math.cos(angle)*pos.x)+(Math.sin(angle)*pos.y),\r\n            y:(-Math.sin(angle)*pos.x)+(Math.cos(angle)*pos.y)\r\n        }\r\n    }\r\n    selectAngle() {\r\n        let mapSp = this.ballManager.ball2dManager.scene2dNode as Laya.Sprite\r\n\r\n        let billordCube = this.billordCube.owner as Laya.Sprite\r\n        billordCube.visible = true\r\n        billordCube.zOrder = this.ballManager.ball2dManager.scene2dNode.numChildren\r\n\r\n        let mainPos = new Laya.Vector2(this.ballworld.mainBall.position.x, this.ballworld.mainBall.position.y)\r\n        let pos = new Laya.Vector2(Laya.stage.mouseX, Laya.stage.mouseY)\r\n        let globalPos = mapSp.globalToLocal(new Laya.Point(pos.x, pos.y), true)\r\n        let inMainLocalPos = new Laya.Vector2(globalPos.x - mainPos.x, globalPos.y - mainPos.y)\r\n        let normal = new Laya.Vector2()\r\n        Laya.Vector2.normalize(inMainLocalPos, normal)\r\n\r\n        let cos = Laya.Vector2.dot(normal, new Laya.Vector2(1, 0))\r\n        let angle = 0\r\n        angle = 180 / Math.PI * Math.acos(cos)\r\n        angle += 90\r\n        if (inMainLocalPos.y > 0) {\r\n            billordCube.rotation = angle\r\n        } else {\r\n            billordCube.rotation = 180 - angle\r\n        }\r\n        billordCube.pos(mainPos.x + (normal.x * -10), mainPos.y + normal.y * -10)\r\n\r\n    }\r\n    /**\r\n     * \u6E38\u620F\u7684tick\u8FD0\u884C\u65F6\r\n     * @param dt \r\n     */\r\n    updateTick(dt: number) {\r\n        this.ballworld.runTick(dt)\r\n        this.ballworld.ballList.forEach(item => {\r\n            let ballItem = this.ballManager.ballKv[item.id]\r\n            let ball2d = ballItem.ball2d\r\n            let ball2dSp = ball2d.owner as Laya.Sprite\r\n            \r\n            let localPos = new Laya.Vector2(ball2dSp.x-item.position.x,ball2dSp.y-item.position.y)\r\n            let len = Laya.Vector2.scalarLength(localPos)\r\n            let normal = localPos.clone()\r\n            Laya.Vector2.normalize(localPos,normal )\r\n            \r\n            let ball3dNode = ballItem.ball3d.ballNode as Laya.Sprite3D\r\n            if(len){\r\n\r\n\r\n                // let routed = this.routeAngle(normal,90)\r\n                // normal.x = routed.x\r\n                // normal.y = routed.y\r\n\r\n\r\n                ball3dNode.transform.rotate(new Laya.Vector3(normal.y*(len/160)*360,0,normal.x*(len/160)*360),false,false)\r\n                ball2dSp.pos(item.position.x, item.position.y)\r\n            }\r\n          \r\n        })\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * \u7EC4\u4EF6\u88AB\u6FC0\u6D3B\u540E\u6267\u884C\uFF0C\u6B64\u65F6\u6240\u6709\u8282\u70B9\u548C\u7EC4\u4EF6\u5747\u5DF2\u521B\u5EFA\u5B8C\u6BD5\uFF0C\u6B64\u65B9\u6CD5\u53EA\u6267\u884C\u4E00\u6B21\r\n     */\r\n    //onAwake(): void {}\r\n\r\n    /**\r\n     * \u7EC4\u4EF6\u88AB\u542F\u7528\u540E\u6267\u884C\uFF0C\u4F8B\u5982\u8282\u70B9\u88AB\u6DFB\u52A0\u5230\u821E\u53F0\u540E\r\n     */\r\n    //onEnable(): void {}\r\n\r\n    /**\r\n     * \u7EC4\u4EF6\u88AB\u7981\u7528\u65F6\u6267\u884C\uFF0C\u4F8B\u5982\u4ECE\u8282\u70B9\u4ECE\u821E\u53F0\u79FB\u9664\u540E\r\n     */\r\n    //onDisable(): void {}\r\n\r\n    /**\r\n     * \u7B2C\u4E00\u6B21\u6267\u884Cupdate\u4E4B\u524D\u6267\u884C\uFF0C\u53EA\u4F1A\u6267\u884C\u4E00\u6B21\r\n     */\r\n    //onStart(): void {}\r\n\r\n    /**\r\n     * \u624B\u52A8\u8C03\u7528\u8282\u70B9\u9500\u6BC1\u65F6\u6267\u884C\r\n     */\r\n    //onDestroy(): void {\r\n\r\n    /**\r\n     * \u6BCF\u5E27\u66F4\u65B0\u65F6\u6267\u884C\uFF0C\u5C3D\u91CF\u4E0D\u8981\u5728\u8FD9\u91CC\u5199\u5927\u5FAA\u73AF\u903B\u8F91\u6216\u8005\u4F7F\u7528getComponent\u65B9\u6CD5\r\n     */\r\n    onUpdate(): void {\r\n        this.updateTick(Laya.timer.delta)\r\n    }\r\n\r\n    /**\r\n     * \u6BCF\u5E27\u66F4\u65B0\u65F6\u6267\u884C\uFF0C\u5728update\u4E4B\u540E\u6267\u884C\uFF0C\u5C3D\u91CF\u4E0D\u8981\u5728\u8FD9\u91CC\u5199\u5927\u5FAA\u73AF\u903B\u8F91\u6216\u8005\u4F7F\u7528getComponent\u65B9\u6CD5\r\n     */\r\n    //onLateUpdate(): void {}\r\n\r\n    /**\r\n     * \u9F20\u6807\u70B9\u51FB\u540E\u6267\u884C\u3002\u4E0E\u4EA4\u4E92\u76F8\u5173\u7684\u8FD8\u6709onMouseDown\u7B49\u5341\u591A\u4E2A\u51FD\u6570\uFF0C\u5177\u4F53\u8BF7\u53C2\u9605\u6587\u6863\u3002\r\n     */\r\n    //onMouseClick(): void {}\r\n}", "const { regClass, property } = Laya;\r\n\r\n@regClass('7bad1742-6eed-4d8d-81c0-501dc5bf03d6', '../src/Main.ts')\r\nexport class Main extends Laya.Script {\r\n\r\n\r\n    onStart() {\r\n        \r\n        console.log(\"Game start\");\r\n    }\r\n}", "const { regClass, property } = Laya;\r\n\r\n@regClass('da0096b9-6cc9-47c9-81e5-27a79ff1d8f9', '../src/ss.ts')\r\nexport class Script extends Laya.Script {\r\n    //declare owner : Laya.Sprite3D;\r\n\r\n    @property(String)\r\n    public text: string = \"\";\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * \u7EC4\u4EF6\u88AB\u6FC0\u6D3B\u540E\u6267\u884C\uFF0C\u6B64\u65F6\u6240\u6709\u8282\u70B9\u548C\u7EC4\u4EF6\u5747\u5DF2\u521B\u5EFA\u5B8C\u6BD5\uFF0C\u6B64\u65B9\u6CD5\u53EA\u6267\u884C\u4E00\u6B21\r\n     */\r\n    //onAwake(): void {}\r\n\r\n    /**\r\n     * \u7EC4\u4EF6\u88AB\u542F\u7528\u540E\u6267\u884C\uFF0C\u4F8B\u5982\u8282\u70B9\u88AB\u6DFB\u52A0\u5230\u821E\u53F0\u540E\r\n     */\r\n    //onEnable(): void {}\r\n\r\n    /**\r\n     * \u7EC4\u4EF6\u88AB\u7981\u7528\u65F6\u6267\u884C\uFF0C\u4F8B\u5982\u4ECE\u8282\u70B9\u4ECE\u821E\u53F0\u79FB\u9664\u540E\r\n     */\r\n    //onDisable(): void {}\r\n\r\n    /**\r\n     * \u7B2C\u4E00\u6B21\u6267\u884Cupdate\u4E4B\u524D\u6267\u884C\uFF0C\u53EA\u4F1A\u6267\u884C\u4E00\u6B21\r\n     */\r\n    //onStart(): void {}\r\n\r\n    /**\r\n     * \u624B\u52A8\u8C03\u7528\u8282\u70B9\u9500\u6BC1\u65F6\u6267\u884C\r\n     */\r\n    //onDestroy(): void {\r\n\r\n    /**\r\n     * \u6BCF\u5E27\u66F4\u65B0\u65F6\u6267\u884C\uFF0C\u5C3D\u91CF\u4E0D\u8981\u5728\u8FD9\u91CC\u5199\u5927\u5FAA\u73AF\u903B\u8F91\u6216\u8005\u4F7F\u7528getComponent\u65B9\u6CD5\r\n     */\r\n    //onUpdate(): void {}\r\n\r\n    /**\r\n     * \u6BCF\u5E27\u66F4\u65B0\u65F6\u6267\u884C\uFF0C\u5728update\u4E4B\u540E\u6267\u884C\uFF0C\u5C3D\u91CF\u4E0D\u8981\u5728\u8FD9\u91CC\u5199\u5927\u5FAA\u73AF\u903B\u8F91\u6216\u8005\u4F7F\u7528getComponent\u65B9\u6CD5\r\n     */\r\n    //onLateUpdate(): void {}\r\n\r\n    /**\r\n     * \u9F20\u6807\u70B9\u51FB\u540E\u6267\u884C\u3002\u4E0E\u4EA4\u4E92\u76F8\u5173\u7684\u8FD8\u6709onMouseDown\u7B49\u5341\u591A\u4E2A\u51FD\u6570\uFF0C\u5177\u4F53\u8BF7\u53C2\u9605\u6587\u6863\u3002\r\n     */\r\n    //onMouseClick(): void {}\r\n}"],
  "mappings": "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",
  "names": ["module", "exports", "key", "property", "i", "Body", "object", "Bodies", "vertices", "Engine", "Matter", "Render", "Runner", "point", "segment", "World", "regClass", "property", "regClass", "property", "regClass", "property", "regClass", "property", "ball3d", "ball2d", "regClass", "property", "regClass", "property", "ball2d", "regClass", "property", "regClass", "property"]
}
